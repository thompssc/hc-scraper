/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowCmp = (function () {
    const EVENT_API_READY = 'tcfApiReady';
    const EVENT_STATUS_LOADED = 'tcloaded';
    const EVENT_STATUS_USER_ACTION_COMPLETE = 'useractioncomplete';
    const EVENT_GPDR_DOES_NOT_APPLY = 'gdprDoesNotApply';

    class Cmp {
        constructor() {
            this.gpdrLoaded = false;
            this.userConsents = null;
            this._init();
        }

        isGpdrLoaded() {
            return this.gpdrLoaded;
        }

        getUserAllConsents() {
            return this.userConsents;
        }

        getUserPublisherConsent(consentType, consentId) {
            if (!this.userConsents) return false;
            return this.userConsents[consentType][consentId];
        }

        _init() {
            window.addEventListener('mediavineCmp', this._cmpEventHandler.bind(this));
        }

        _cmpEventHandler({ detail }) {
            if (detail === EVENT_API_READY) {
                const tcfApiEventHandler = (tcData, success) => {
                    if (!tcData || !success) return;
                    const { eventStatus, gdprApplies, publisher } = tcData;
                    this.gpdrLoaded = gdprApplies;
                    if (eventStatus === EVENT_STATUS_LOADED) {
                        this._setData(publisher);
                        return;
                    }
                    if (eventStatus === EVENT_STATUS_USER_ACTION_COMPLETE) {
                        this._setData(publisher);
                        if (document.body) {
                            document.body.dispatchEvent(new CustomEvent('hc.cmp', { detail: this.userConsents }));
                        }
                    }
                };

                window.__tcfapi('addEventListener', 2, tcfApiEventHandler);
            }
            if (detail === EVENT_GPDR_DOES_NOT_APPLY) {
                this.gpdrLoaded = false;
            }
        }

        _setData(data) {
            this.userConsents = Object.assign(
                {},
                {
                    publisherConsents: data.consents,
                    customConsents: data.customPurpose.consents,
                }
            );
        }
    }

    return new Cmp();
})();
;