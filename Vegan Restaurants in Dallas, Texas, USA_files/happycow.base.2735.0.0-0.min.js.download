/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

const UI_CONSTANTS = Object.freeze({
    colorError: 'red-500',

    displayBlock: 'block',
    displayHidden: 'hidden',
    displayInvisible: 'invisible',
    displayShow: 'show',

    scrollDisabled: 'scroll-off',

    stateActive: 'active',
    stateSelected: 'selected',
    stateOpen: 'open',
});

const UI_ERROR_MESSAGES = Object.freeze({
    authFailed: 'Please login or sign up',
    deleteImageFailed: 'Looks like this image no longer can be deleted. Contact us if you wish to delete it.',
    fallback: 'Something went wrong. Please try again later or contact us.',
    internal: 'Looks like we have a problem on our end. We track these errors automatically but if the problems persists please contact us.',
    initMapFailed: "We're not able to initialize the Map. Please try again in a few minutes.",
});

const UI_TIMEOUTS = Object.freeze({
    inputDebounce: 200,
    resizeDebounce: 250,
    scrollDebounce: 200,
    scrollThrottle: 200,
});
;const Config = (function () {
    let configDataEl = document.getElementById('config');
    if (!configDataEl) return;

    const BASE_DOMAIN = 'happycow.net';
    const BASE_URL = `https://${BASE_DOMAIN}`;

    const STORE_APPLE_APP_URL = 'https://apps.apple.com/app/apple-store/id435871950?pt=93812800';
    const STORE_GOOGLE_PLAY_URL = 'https://play.google.com/store/apps/details?id=com.hcceg.veg.compassionfree';

    configDataEl = configDataEl.dataset;

    const config = {
        apple: {
            authUrl: '//appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js',
            authClientId: 'com.smoothlandon.happycow.website',
            redirectURI: 'https://www.happycow.net/',
        },
        amazonShop: {
            awsAccessKeyId: 'AKIAISBPLROXRUJ3CVQA',
            associateTag: 'happycowsglobalg',
            url: 'https://www.amazon.com/gp/aws/cart/add.html?',
        },
        baseDomain: BASE_DOMAIN,
        consentIds: {
            externalScripts: 1,
            analytics: 2,
        },
        dir: {
            externalLibs: '/modules',
            hcModulesJs: '/js/modules',
            hcPageJs: '/js',
            hcServiceWorkerJs: '/js/sw',
        },
        emailAddresses: {
            partner: `partner@${BASE_DOMAIN}`,
        },
        facebook: {
            appInstallUrl: `https://www.facebook.com/dialog/pagetab?app_id=202351993123002`,
            sdkUrl: '//connect.facebook.net/en_US/sdk.js',
            shareUrl: 'https://www.facebook.com/sharer/sharer.php',
        },
        google: {
            accountsClientUrl: 'https://accounts.google.com/gsi/client',
            accountsClientId: '755501293095-br77j34ovtp5cqatla3kvblr3s0vr117.apps.googleusercontent.com',
            cseUrl: 'https://cse.google.com/cse.js',
            cseKey: '017672370478381545993:zci062ltv6i',
            gtagId: configDataEl.gtagId,
            map: {
                apiUrl: `https://maps.googleapis.com/maps/api/js?v=3&key=${configDataEl.mapKey}`,
            },
            recaptcha: {
                url: 'https://www.recaptcha.net/recaptcha/api.js?hl=en&onload=recaptchaRender&render=explicit',
                altUrl: 'https://www.recaptcha.net/recaptcha/api.js?hl=en',
            },
        },
        hubSpot: {
            url: '//js-eu1.hs-scripts.com/26717710.js',
        },
        map: {
            tileLayerUrl: `//${configDataEl.mapServerBaseUrl}/hot/{z}/{x}/{y}.png`,
            copyrightUrl: 'https://www.openstreetmap.org/copyright',
            leafletUrl: 'https://leafletjs.com/',
            markerUrl: 'https://d1mvj2ulps5lli.cloudfront.net/map_markers',
            pinMarkerUrl: `${BASE_URL}/img/map/pin-map.png`,
        },
        purpleCarrot: {
            urlVariantA: 'https://purple-carrot.wk5q.net/5goj41',
            urlVariantB: 'https://purple-carrot.wk5q.net/Y97d6B',
            urlDefault: 'https://www.purplecarrot.com/happycow',
        },
        stripe: {
            publicKey: configDataEl.stripePublicKey,
        },
        twitterX: {
            tweetTextUrl: 'https://x.com/intent/tweet?text=',
            tweetUrl: 'https://x.com/intent/tweet',
            widgetsUrl: 'https://platform.twitter.com/widgets.js',
        },
        urls: {
            amCharts: 'https://www.amcharts.com',
            appleAppStore: STORE_APPLE_APP_URL,
            base: BASE_URL,
            imgCategory: `${BASE_URL}/img/category`,
            googlePlayStore: STORE_GOOGLE_PLAY_URL,
            reviews: `${BASE_URL}/reviews`,
            topCitiesVenues: '/misc/top-cities-venues.json',
            safariPushNotifications: `web.${BASE_DOMAIN}`,
            faviconSize32: '/img/favicon-hc-32x32.png',
            faviconSize16: '/img/favicon-hc-16x16.png',
            faviconAlertSize32: '/img/favicon-hc-alert-32x32.png',
            faviconAlertSize16: '/img/favicon-hc-alert-16x16.png',
            ytEmbed: '//www.youtube.com/embed',
            ytImg: '//i.ytimg.com/vi',
        },
        veganuary: {
            appleAppStoreUrl: `${STORE_APPLE_APP_URL}&ct=veganuary-2022&mt=8`,
            googlePlayStoreUrl: `${STORE_GOOGLE_PLAY_URL}&referrer=utm_source%3Dredirect%26utm_medium%3Dredirect%26utm_campaign%3Dveganuary`,
        },
        viewSettings: {
            login: configDataEl.login,
            mobile: configDataEl.mobile,
            support: configDataEl.support,
            veganOnly: configDataEl.veganOnly,
        },
        webHooks: {
            salesLeads: `https://svc.${BASE_DOMAIN}/sales/leads`,
            claimListing: `https://svc.${BASE_DOMAIN}/bizclaim/claim`,
            claimListingProofUpload: `https://svc.${BASE_DOMAIN}/bizclaim/upload`,
        },
    };

    return config;
})();
;if (typeof AbortController === 'undefined') {
    loadJs(`${Config.dir.externalLibs}/abortcontroller-polyfill/dist/abortcontroller-polyfill-only.js`).catch((error) => {
        HappycowErrorReporter.logError({ error });
    });
}

window.requestIdleCallback =
    window.requestIdleCallback ||
    function (cb) {
        const start = Date.now();
        return setTimeout(function () {
            cb({
                didTimeout: false,
                timeRemaining: function () {
                    return Math.max(0, 50 - (Date.now() - start));
                },
            });
        }, 1);
    };

if (!Promise.prototype.finally) {
    Promise.prototype.finally =
        Promise.prototype.finally ||
        {
            finally(fn) {
                const onFinally = (value) => Promise.resolve(fn()).then(() => value);
                return this.then(
                    (result) => onFinally(result),
                    (reason) => onFinally(Promise.reject(reason))
                );
            },
        }.finally;
}

async function post(url, formData, extra = {}) {
    return new Promise((resolve, reject) => {
        const params = {
            method: 'POST',
            body: formData,
            credentials: 'include',
            headers: getFetchHeaders(),
        };
        const loadingSelector = extra.hasOwnProperty('target') ? extra.target : null;
        delete extra.target;
        Object.assign(params, extra);
        HappycowCommon.startLoading(loadingSelector);
        fetch(url, params)
            .then((response) => response.json())
            .then((result) => resolve(result))
            .catch((e) => reject(e))
            .finally(() => {
                HappycowCommon.stopLoading(loadingSelector);
            });
    });
}

async function get(url, extra = {}) {
    return new Promise((resolve, reject) => {
        const params = {
            headers: getFetchHeaders(),
            credentials: 'include',
        };
        const loadingSelector = extra.hasOwnProperty('target') ? extra.target : null;
        delete extra.target;
        Object.assign(params, extra);
        HappycowCommon.startLoading(loadingSelector);
        fetch(url, params)
            .then((response) => response.json())
            .then((result) => resolve(result))
            .catch((e) => reject(e))
            .finally(() => HappycowCommon.stopLoading(loadingSelector));
    });
}

function getFetchHeaders() {
    const headers = {};
    headers['X-Requested-With'] = 'XMLHttpRequest';
    return headers;
}

function preloadSupported() {
    const relList = document.createElement('link').relList;
    return !!(relList && relList.supports && relList.supports('preload'));
}

function loadMultipleJs(uris, defer = true) {
    const promises = [];
    uris.forEach((uri) => {
        promises.push(loadJs(uri, defer));
    });
    return Promise.all(promises);
}

function loadJs(uri, defer = true, async = false) {
    return new Promise((resolve, reject) => {
        const elems = document.getElementsByTagName('script');
        const len = Array.from(elems).filter((e) => {
            return e.src == uri;
        }).length;
        if (len !== 0) resolve();
        const wf = document.createElement('script');
        const s = document.scripts[0];
        wf.onload = resolve;
        wf.onerror = reject;
        // wf.crossOrigin = "anonymous";
        const jsVersion = document.querySelector('#config').dataset.version;
        if (uri.includes('?')) {
            wf.src = uri + '&js=' + jsVersion;
        } else {
            wf.src = uri + '?js=' + jsVersion;
        }
        wf.defer = defer;
        wf.async = async;
        s.parentNode.insertBefore(wf, s);
    });
}

function addLiveEventListener(event, selector, handler, useCapture = true) {
    const rootElement = document.querySelector('body');
    rootElement.addEventListener(
        event,
        (evt) => {
            let targetElement = evt.target;
            while (targetElement != null) {
                if (targetElement.matches(selector)) {
                    handler.call(targetElement, evt);
                    return;
                }
                targetElement = targetElement.parentElement;
            }
        },
        useCapture
    );
}

function addOnEventListener(event, selector, handler, useCapture = false) {
    const elementsArray = document.querySelectorAll(selector);
    elementsArray.forEach((elem) => {
        elem.addEventListener(
            event,
            (e) => {
                handler.call(elem, e);
            },
            useCapture
        );
    });
}

function dispatchCustomEvent(item, type, values = null) {
    if (!item) return;
    const event = new CustomEvent(type, { detail: values });
    item.dispatchEvent(event);
}
;function isElement(elem) {
    return elem instanceof Element || elem instanceof HTMLDocument;
}

function isNodeList(elem) {
    return elem instanceof NodeList;
}

function emptyElement(elemSelector) {
    const target = isElement(elemSelector) ? elemSelector : document.querySelector(elemSelector);
    if (!target) return;
    const clonedNode = target.cloneNode(false);
    target.parentNode.replaceChild(clonedNode, target);
    return clonedNode;
}

function deleteElement(elemSelector) {
    const target = isElement(elemSelector) ? elemSelector : document.querySelector(elemSelector);
    if (!target) return;
    target.parentNode.removeChild(target);
}

function htmlToElement(html) {
    const template = document.createElement('template');
    html = html.trim();
    template.innerHTML = html;
    return template.content.firstChild;
}

function addContent(elemSelector, content) {
    const target = document.querySelector(elemSelector);
    if (!target) return;
    target.innerHTML = content;
}

function appendContent(elemSelector, content, position = 'beforeend') {
    const target = isElement(elemSelector) ? elemSelector : document.querySelector(elemSelector);
    if (!target) return;
    target.insertAdjacentHTML(position, content);
}

function prependContent(elemSelector, content) {
    const target = isElement(elemSelector) ? elemSelector : document.querySelector(elemSelector);
    if (!target) return;
    const div = document.createElement('div');
    div.innerHTML = content;
    target.prepend(div.firstElementChild);
}

function wrap(toWrap, wrapper) {
    wrapper = wrapper || document.createElement('div');
    toWrap.parentNode.appendChild(wrapper);
    return wrapper.appendChild(toWrap);
}

function autoHeight(elemSelector, maxLength) {
    const target = isElement(elemSelector) ? elemSelector : document.querySelector(elemSelector);
    counter(target, maxLength);
    const initialHeight = target.offsetHeight;
    setAutoHeight(target, initialHeight);
    target.addEventListener('blur', (e) => {
        setAutoHeight(e.target, initialHeight);
        counter(e.target, maxLength);
    });
    target.addEventListener('input', (e) => {
        setAutoHeight(e.target, initialHeight);
        counter(e.target, maxLength);
    });
}

function setAutoHeight(target, initialHeight) {
    target.style.height = 'auto';
    target.style.overflowY = 'hidden';
    target.style.height = target.scrollHeight > initialHeight ? target.scrollHeight + 'px' : initialHeight + 'px';
}

function counter(el, maxLength) {
    const counterEl = el.parentElement.querySelector('.counter');
    if (!counterEl) return;
    const length = el.value.length;
    if (length >= maxLength) {
        el.value = el.value.substring(0, maxLength);
    }
    let left = maxLength - length;
    left = left < 0 ? 0 : left;
    counterEl.textContent = left + ' characters left';
}

function selectTextareaContent(el) {
    el.parentElement.querySelector('textarea').select();
}

function toggleBodyScroll() {
    document.body.classList.toggle('scroll-off');
}

function isInViewport(elem) {
    const bounding = elem.getBoundingClientRect();
    return (
        bounding.top >= 0 &&
        bounding.left >= 0 &&
        bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        bounding.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}

function isScrolledIntoView(el, container) {
    const elemLeft = el.getBoundingClientRect().left;
    const elemRight = el.getBoundingClientRect().right;
    // const elemWidth = el.getBoundingClientRect().width;
    const containerLeft = container.getBoundingClientRect().left;
    const containerRight = container.getBoundingClientRect().right;
    // const containerWidth = container.getBoundingClientRect().width;
    const overhang = 5;
    return containerLeft < elemLeft + overhang && containerRight > elemRight - overhang;
}

function setViewport(cssVar) {
    const clientHeight = window.innerHeight;
    let deviceClientHeight = 0;
    if (clientHeight === deviceClientHeight) return;
    requestAnimationFrame(() => {
        document.documentElement.style.setProperty(cssVar, `${clientHeight}px`);
        deviceClientHeight = clientHeight;
    });
}
;function nodeListsAreEqual(list1, list2) {
    if (list1.length !== list2.length) {
        return false;
    }
    return Array.from(list1).every((node, index) => node === list2[index]);
}

function getSiblings(elem) {
    const siblings = [];
    let sibling = elem.parentElement.firstElementChild;
    while (sibling) {
        if (sibling !== elem) {
            siblings.push(sibling);
        }
        sibling = sibling.nextElementSibling;
    }
    return siblings;
}

function getNextSiblings(el, filter) {
    const siblings = [];
    while ((el = el.nextSibling)) {
        if (!filter || filter(el)) {
            siblings.push(el);
        }
    }
    return siblings;
}

function getPreviousSiblings(el, filter) {
    const siblings = [];
    while ((el = el.previousSibling)) {
        if (!filter || filter(el)) {
            siblings.push(el);
        }
    }
    return siblings;
}

function getNextSibling(elem, selector) {
    let sibling = elem.nextElementSibling;
    if (!selector) return sibling;
    while (sibling) {
        if (sibling.matches(selector)) return sibling;
        sibling = sibling.nextElementSibling;
    }
    return false;
}

function getPreviousSibling(elem, selector) {
    let sibling = elem.previousElementSibling;
    if (!selector) return sibling;
    while (sibling) {
        if (sibling.matches(selector)) return sibling;
        sibling = sibling.previousElementSibling;
    }
    return false;
}

function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function sanitize(str) {
    const temp = document.createElement('div');
    temp.textContent = str;
    return temp.innerHTML;
}

function truncate(str, size) {
    if (str.length > size) {
        return str.substring(0, size) + '...';
    }
    return str;
}

function debounce(func, wait, immediate) {
    let timeout;
    return function () {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        }, wait);
        if (immediate && !timeout) func.apply(context, args);
    };
}

function throttle(func, timeFrame) {
    let lastTime = 0;
    return () => {
        const now = new Date();
        if (now - lastTime >= timeFrame) {
            func();
            lastTime = now;
        }
    };
}

function cloneObj(obj) {
    if (window.structuredClone) {
        return structuredClone(obj);
    }
    return JSON.parse(JSON.stringify(obj));
}

function urlSearchParamsToObject(urlSearchParams) {
    if (Object.fromEntries) {
        return Object.fromEntries(urlSearchParams);
    }
    const result = {};
    for (const entry of urlSearchParams.entries()) {
        const [key, value] = entry;
        result[key] = value;
    }
    return result;
}

function getNested(obj, ...args) {
    return args.reduce((nobj, level) => nobj && nobj[level], obj);
}

function withinOffset(value1, value2, offset) {
    return value1 > value2 - offset && value1 < value2 + offset;
}

function supportsDynamicUnit(unit, value) {
    return window.CSS && window.CSS.supports && window.CSS.supports(unit, value);
}

function getMobileOperatingSystem() {
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return 'iOS';
    }
    return 'Android';
}

function getUserDevice() {
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    let device = 'Desktop';
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        device = 'iOS';
        return device;
    }
    if (/Android/.test(userAgent)) {
        device = 'Android';
        return device;
    }
    return device;
}

function detectMobile() {
    if (
        navigator.userAgent.match(/Googlebot|Bingbot/i) ||
        navigator.userAgent.match(/Bingbot/i) ||
        navigator.userAgent.match(/Rogerbot/i) ||
        navigator.userAgent.match(/Google Page Speed Insights/i) ||
        navigator.userAgent.match(/Google/i) ||
        navigator.userAgent.match(/Chrome-Lighthouse/i) ||
        navigator.userAgent.match(/Lighthouse/i) ||
        navigator.userAgent.match(/Android/i) ||
        navigator.userAgent.match(/webOS/i) ||
        navigator.userAgent.match(/iPhone/i) ||
        navigator.userAgent.match(/iPad/i) ||
        navigator.userAgent.match(/iPod/i) ||
        navigator.userAgent.match(/BlackBerry/i) ||
        navigator.userAgent.match(/Windows Phone/i)
    ) {
        return true;
    }
    return false;
}

function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
}

function deepMerge(target, source) {
    if (!isObject(target) || !isObject(source)) return;

    Object.keys(source).forEach((property) => {
        if (Array.isArray(target[property]) && Array.isArray(source[property])) {
            target[property] = target[property].concat(source[property]);
            return;
        }
        if (isObject(target[property]) && isObject(source[property])) {
            target[property] = deepMerge(target[property], source[property]);
            return;
        }
        target[property] = source[property];
    });

    return target;
}
;const instanceManager = (function () {
    const instances = new Map();

    return {
        get(el, key) {
            if (instances.has(el)) {
                return instances.get(el).get(key);
            }
        },
        getEl(el) {
            if (instances.has(el)) {
                return instances.get(el);
            }
        },
        set(el, key, instance) {
            if (!instances.has(el)) {
                instances.set(el, new Map());
            }

            instances.get(el).set(key, instance);
        },
        remove(el, key) {
            if (!instances.has(el)) {
                return;
            }

            const instanceMap = instances.get(el);
            instanceMap.delete(key);

            if (instanceMap.size === 0) {
                instances.delete(el);
            }
        },
    };
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowErrorReporter = (function () {
    const _ignoreSources = /facebookhit|google|amazon|flashtalking\.com|mediavine\.com|yieldmo\.com/i;

    class ErrorReporter {
        constructor() {
            this._isBot = 'webdriver' in navigator && navigator.webdriver;
            this._init();
        }

        logError(data, toastrMessage = UI_ERROR_MESSAGES.internal) {
            if (this._isBot || !data) return;
            this._sendError(data);
            if (toastrMessage) {
                HappycowToastr.error(toastrMessage);
            }
        }

        _init() {
            if (this._isBot) return;
            window.onerror = (errorEventMessage, source, lineNo, columnNo, error) => {
                this._sendError({ errorMessage: errorEventMessage, source, lineNo, columnNo, error });
            };
        }

        _sendError(data) {
            const csrfEl = document.querySelector('._csrf');
            if (!csrfEl) return;

            const formData = new FormData();
            const { columnNo, error, errorMessage, lineNo, source } = data;
            let message;
            let name;
            let stack;

            if (error) {
                message = error.message;
                name = error.name;
                stack = error.stack;
            }

            if (this._detectBot(source) || this._detectBot(stack)) return;

            if (stack) {
                const stackFormatted = this._formatStackMessage(stack, name, message);
                formData.append('stackTrace', stackFormatted);
            }

            formData.append(csrfEl.name, csrfEl.value);
            formData.append('name', name || 'Error');
            formData.append('message', message || errorMessage || 'Error message is not specified');
            formData.append('source', source || 'Source is not specified');
            formData.append('lineNo', lineNo || 'Line is not specified');
            formData.append('columnNo', columnNo || 'Column is not specified');
            formData.append('userAgent', navigator.userAgent || 'UserAgent is not specified');
            formData.append('url', window.location.href || 'URL is not specified');

            post('/ajax/logger/js/', formData, { target: false });
        }

        _formatStackMessage(stackMessage, errorName, errorMessage) {
            if (!stackMessage || !errorName || !errorMessage) return;
            const notAllowedWordsRegex = new RegExp(`global code|${errorName}:|${errorMessage}`, 'g');
            return stackMessage.replace(notAllowedWordsRegex, '').replace(/@/g, ' at ').replace(/\s+/g, ' ').trim();
        }

        _detectBot(text) {
            if (!text) return;
            if (text.match(_ignoreSources)) {
                this._isBot = true;
                return true;
            }
            return false;
        }
    }

    return new ErrorReporter();
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowObserverIntersection = (function () {
    const defaultOptions = {
        root: null,
        rootMargin: '0px',
        threshold: [0, 0.25, 0.5, 0.75, 1],
    };

    class ObserverIntersection {
        constructor() {
            this._options = cloneObj(defaultOptions);
            this._io = null;
            this._observers = [];
            this._queue = [];
            this._init();
        }

        observeElement(target) {
            const targetEl = isElement(target) ? target : document.querySelector(target);
            if (!targetEl) return;
            this._observe(targetEl);
        }

        observeElements(target) {
            const targetElms = Array.isArray(target) || isNodeList(target) ? target : document.querySelectorAll(target);
            if (targetElms.length === 0) return;
            for (const targetEl of targetElms) {
                if (!targetEl) continue;
                this._observe(targetEl);
            }
        }

        unobserveElement(target) {
            const targetEl = isElement(target) ? target : document.querySelector(target);
            if (!targetEl) return;
            this._io.unobserve(targetEl);
        }

        _init() {
            if (
                !('IntersectionObserver' in window) ||
                !('IntersectionObserverEntry' in window) ||
                !('intersectionRatio' in window.IntersectionObserverEntry.prototype)
            ) {
                loadJs(`${Config.dir.externalLibs}/intersection-observer/intersection-observer.js`)
                    .then(() => {
                        this._setupIo();
                    })
                    .catch((error) => {
                        HappycowErrorReporter.logError({ error });
                    });
                return;
            }

            this._setupIo();
        }

        _setupIo() {
            this._io = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.intersectionRatio > 0) {
                        const target = entry.target;
                        if (!target) return;
                        const unobserve = target.dataset.unobserve;
                        dispatchCustomEvent(document.body, 'intersection.visible', entry);
                        if (!unobserve) {
                            this._io.unobserve(target);
                        }
                    }
                });
            }, this._options);

            if (this._queue.length > 0) {
                this._queue.forEach((item) => {
                    this._io.observe(item);
                });
            }
        }

        _observe(el) {
            if (!this._io) {
                this._queue.push(el);
                return;
            }
            this._io.observe(el);
        }
    }

    return new ObserverIntersection();
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowObserverMutation = (function () {
    const ATTRIBUTES = 'attributes';
    const CHILD_LIST = 'childList';
    const SUB_TREE = 'subtree';

    const defaultOptions = {
        attributes: true,
        childList: true,
        subtree: true,
    };

    class ObserverMutation {
        constructor() {
            this._options = cloneObj(defaultOptions);
            this._mo = null;
            this._observers = [];
            this._queue = [];
            this._init();
        }

        observeElement(target, options = this._options) {
            const targetEl = isElement(target) ? target : document.querySelector(target);
            if (!targetEl) return;
            this._observe(targetEl, options);
        }

        unobserveElement(target) {
            const targetEl = isElement(target) ? target : document.querySelector(target);
            if (!targetEl) return;
            this._mo.disconnect(targetEl);
        }

        _init() {
            this._mo = new MutationObserver((mutations) => {
                this._mutationsCallback(mutations);
            });

            if (this._queue.length > 0) {
                this._queue.forEach((item) => {
                    this._mo.observe(item, this._options);
                });
            }
        }

        _observe(el, options) {
            if (!this._mo) {
                this._queue.push(el);
                return;
            }
            this._mo.observe(el, options);
        }

        _mutationsCallback(mutations) {
            mutations.forEach((mutation) => {
                const { target } = mutation;
                if (!target) return;

                const { unobserve } = target.dataset;
                const { type } = mutation;
                if (!type) return;

                if (type === ATTRIBUTES) {
                    dispatchCustomEvent(document.body, `mutation.${ATTRIBUTES}`, mutation);
                } else if (type === CHILD_LIST) {
                    dispatchCustomEvent(document.body, `mutation.${CHILD_LIST}`, mutation);
                } else if (type === SUB_TREE) {
                    dispatchCustomEvent(document.body, `mutation.${SUB_TREE}`, mutation);
                }

                if (!unobserve) {
                    this._mo.disconnect(target);
                }
            });
        }
    }

    return new ObserverMutation();
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowCarousel = (function () {
    const CLASS_NAME_CAROUSEL = 'carousel';
    const CLASS_NAME_CAROUSEL_ITEM = 'carousel-item';
    const CLASS_NAME_ACTIVE = UI_CONSTANTS.stateActive;
    const CLASS_NAME_INVISIBLE = UI_CONSTANTS.displayInvisible;
    const CLASS_NAME_HIDDEN = UI_CONSTANTS.displayHidden;
    const CLASS_NAME_BLOCK = 'md:block';
    const CLASS_NAME_OPACITY = 'opacity-50';
    const CLASS_NAME_INITIALIZED = 'initialized';

    const SELECTOR_CAROUSEL = `.${CLASS_NAME_CAROUSEL}`;
    const SELECTOR_CAROUSEL_ITEM = `.${CLASS_NAME_CAROUSEL_ITEM}`;
    const SELECTOR_CAROUSEL_SCROLL = '.carousel-scroll';
    const SELECTOR_CAROUSEL_CONTROLS = '.carousel-controls';
    const SELECTOR_CAROUSEL_CONTROL_NEXT = '.carousel-control-next';
    const SELECTOR_CAROUSEL_CONTROL_PREV = '.carousel-control-prev';
    const SELECTOR_CAROUSEL_INDICATORS = '.carousel-indicators';
    const SELECTOR_CAROUSEL_INDICATOR = '.carousel-indicator';
    const SELECTOR_ACTIVE = `.${CLASS_NAME_ACTIVE}`;
    const SELECTOR_INITIALIZED = `.${CLASS_NAME_INITIALIZED}`;

    const NEXT_CONTROL = 'NEXT';
    const PREV_CONTROL = 'PREV';

    const defaultOptions = {
        rootEl: 'body',
        controlClass: CLASS_NAME_INVISIBLE,
        scrollOptions: {
            behavior: 'smooth',
            block: 'nearest',
            inline: 'end',
        },
    };

    class Carousel {
        constructor(options = {}) {
            this._selector = SELECTOR_CAROUSEL;
            this._options = Object.assign(cloneObj(defaultOptions), options);
            this._carousels = document.querySelectorAll(`${this._options.rootEl} ${this._selector}:not(${SELECTOR_INITIALIZED})`);
        }

        init(selector = '') {
            if (selector) {
                this._carousels = document.querySelectorAll(`${this._options.rootEl} ${selector}`);
            }

            if (this._carousels.length < 1) {
                return;
            }

            this._carousels.forEach((carousel) => {
                this.setControlVisibility(carousel);
                if (carousel.classList.contains(CLASS_NAME_INITIALIZED)) {
                    return;
                }
                this._carouselEvents(carousel);
                carousel.classList.add(CLASS_NAME_INITIALIZED);
            });
        }

        setControlVisibility(carousel, controlClass = this._options.controlClass) {
            const carouselScroll = carousel.querySelector(SELECTOR_CAROUSEL_SCROLL);
            const controls = carousel.querySelector(SELECTOR_CAROUSEL_CONTROLS);
            const prevControl = carousel.querySelector(`${SELECTOR_CAROUSEL_CONTROLS} ${SELECTOR_CAROUSEL_CONTROL_PREV}`);
            const nextControl = carousel.querySelector(`${SELECTOR_CAROUSEL_CONTROLS} ${SELECTOR_CAROUSEL_CONTROL_NEXT}`);
            prevControl.classList.remove(controlClass);
            nextControl.classList.remove(controlClass);
            if (carouselScroll.scrollLeft == 0) {
                prevControl.classList.add(controlClass);
            }
            if (withinOffset(carouselScroll.scrollLeft + carouselScroll.clientWidth, carouselScroll.scrollWidth, 2)) {
                nextControl.classList.add(controlClass);
            }
            if (prevControl.classList.contains(controlClass) && nextControl.classList.contains(controlClass)) {
                controls.classList.add(CLASS_NAME_HIDDEN);
                return;
            }
            controls.classList.add(CLASS_NAME_BLOCK);
        }

        setScrollToActiveItem(carouselSelector, scrollOptions = this._options.scrollOptions) {
            const carousel = isElement(carouselSelector) ? carouselSelector : document.querySelector(carouselSelector);
            if (carousel.querySelector(`${SELECTOR_CAROUSEL_ITEM}${SELECTOR_ACTIVE}`)) {
                carousel.querySelector(`${SELECTOR_CAROUSEL_ITEM}${SELECTOR_ACTIVE}`).scrollIntoView(scrollOptions);
            }
        }

        prev(carousel) {
            this._slide(carousel, PREV_CONTROL);
        }

        next(carousel) {
            this._slide(carousel, NEXT_CONTROL);
        }

        setIndicators(carouselSelector, carouselItemIndex) {
            const carousel = isElement(carouselSelector) ? carouselSelector : document.querySelector(carouselSelector);
            if (!carousel || carouselItemIndex === -1) return;
            const carouselIndicators = carousel.querySelector(SELECTOR_CAROUSEL_INDICATORS);
            if (!carouselIndicators) return;
            const carouselIndicator = carousel.querySelector(`${SELECTOR_CAROUSEL_INDICATOR}[data-index="${carouselItemIndex}"]`);
            carouselIndicators.querySelectorAll(SELECTOR_CAROUSEL_INDICATOR).forEach((item) => {
                item.classList.remove(CLASS_NAME_ACTIVE);
                item.classList.add(CLASS_NAME_OPACITY);
            });

            if (carouselIndicator) {
                carouselIndicator.classList.add(CLASS_NAME_ACTIVE);
            }
        }

        _carouselEvents(carousel) {
            carousel.querySelector(`${SELECTOR_CAROUSEL_CONTROLS} ${SELECTOR_CAROUSEL_CONTROL_NEXT}`).addEventListener('click', () => {
                this.next(carousel);
            });

            carousel.querySelector(`${SELECTOR_CAROUSEL_CONTROLS} ${SELECTOR_CAROUSEL_CONTROL_PREV}`).addEventListener('click', () => {
                this.prev(carousel);
            });

            carousel.querySelector(SELECTOR_CAROUSEL_SCROLL).addEventListener(
                'scroll',
                debounce(() => {
                    this.setControlVisibility(carousel);
                })
            );

            carousel.querySelectorAll(SELECTOR_CAROUSEL_INDICATOR).forEach((indicator) => {
                indicator.addEventListener('click', (e) => {
                    const currentIndicatorIndex = e.target.dataset.index;
                    if (!currentIndicatorIndex) return;

                    const activeIndicatorIndex = carousel.querySelector(`${SELECTOR_CAROUSEL_INDICATOR}${SELECTOR_ACTIVE}`).dataset.index;
                    if (!activeIndicatorIndex) return;

                    if (currentIndicatorIndex !== activeIndicatorIndex) {
                        const carouselWithSameIndex = carousel.querySelector(`${SELECTOR_CAROUSEL_ITEM}[data-index="${currentIndicatorIndex}"]`);
                        if (!carouselWithSameIndex) return;
                        carousel.querySelectorAll(SELECTOR_CAROUSEL_ITEM).forEach((carouselItem) => {
                            carouselItem.classList.remove(CLASS_NAME_ACTIVE);
                        });
                        carouselWithSameIndex.classList.add(CLASS_NAME_ACTIVE);
                        this.setScrollToActiveItem(carousel);
                        this.setIndicators(carousel, currentIndicatorIndex);
                    }
                });
            });

            carousel.addEventListener(
                'wheel',
                debounce((e) => {
                    this._preventSwiperOverflow(e);
                }),
                { passive: true }
            );

            if (carousel.querySelector(SELECTOR_CAROUSEL_INDICATORS)) {
                addLiveEventListener('intersection.visible', 'body', (e) => {
                    const { target, intersectionRatio } = e.detail;
                    if (intersectionRatio < 1) return;
                    if (target.classList.contains(CLASS_NAME_CAROUSEL_ITEM)) {
                        const index = Array.from(target.parentNode.children).indexOf(target);
                        hcCarousel.setIndicators(target.closest(SELECTOR_CAROUSEL), index);
                    }
                });
            }
        }

        _slide(carousel, direction) {
            const carouselEl = isElement(carousel) ? carousel : document.querySelector(carousel);
            const carouselScroll = carouselEl.querySelector(SELECTOR_CAROUSEL_SCROLL);
            const items = carouselScroll.querySelectorAll(SELECTOR_CAROUSEL_ITEM);
            const itemsArr = Array.from(items);
            let itemIndex = 0;
            let visibleItem;
            let hiddenItem;

            if (direction === PREV_CONTROL) {
                itemIndex = 1;
                itemsArr.some((item) => {
                    if (isScrolledIntoView(item, carouselScroll)) {
                        visibleItem = item;
                        return true;
                    }
                    return false;
                });
                if (visibleItem) {
                    hiddenItem = visibleItem.previousElementSibling;
                }
            }

            if (direction === NEXT_CONTROL) {
                itemsArr.reverse().some((item) => {
                    if (isScrolledIntoView(item, carouselScroll)) {
                        visibleItem = item;
                        return true;
                    }
                    return false;
                });
                if (visibleItem) {
                    hiddenItem = visibleItem.nextElementSibling;
                }
            }

            if (!visibleItem) {
                this.setIndicators(carousel, -1);
                return;
            }

            if (hiddenItem) {
                itemIndex = parseInt(hiddenItem.getAttribute('data-index'), 10);
                hiddenItem.scrollIntoView(this._options.scrollOptions);
                this.setIndicators(carousel, itemIndex);
            }
        }

        _preventSwiperOverflow(e) {
            const { deltaX, deltaY, target } = e;
            const maxX = target.scrollWidth - target.offsetWidth;
            const maxY = target.scrollHeight - target.offsetHeight;
            const nextX = target.scrollLeft + deltaX;
            const nextY = target.scrollTop + deltaY;

            if (nextX < 0 || nextX > maxX || nextY < 0 || nextY > maxY) {
                target.scrollLeft = Math.max(0, Math.min(maxX, nextX));
                target.scrollTop = Math.max(0, Math.min(maxY, nextY));
            }
        }
    }

    return Carousel;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowDropdown = (function () {
    const CLASS_NAME_DROPDOWN_BTN = 'dropdown-toggle';
    const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
    const CLASS_NAME_REVERSE_POSITION = 'reverse-position';
    const CLASS_NAME_OPEN = UI_CONSTANTS.stateOpen;

    const SELECTOR_DROPDOWN = '.dropdown';
    const SELECTOR_DROPDOWN_BTN = `.${CLASS_NAME_DROPDOWN_BTN}`;
    const SELECTOR_DROPDOWN_MENU = `.${CLASS_NAME_DROPDOWN_MENU}`;

    const defaultOptions = {
        rootEl: 'body',
    };

    class Dropdown {
        constructor(options = {}) {
            this._options = Object.assign(cloneObj(defaultOptions), options);
        }

        init() {
            this._dropdownEvents();
        }

        open(target) {
            if (!target.parentElement.querySelector(SELECTOR_DROPDOWN_MENU)) return;
            this.closeOpened();
            target.parentElement.classList.add(CLASS_NAME_OPEN);
            target.setAttribute('aria-expanded', 'true');
            if (target.parentElement.getAttribute('data-collision')) {
                this._detectCollision(target.parentElement);
            }
            dispatchCustomEvent(target, 'shown.hc.dropdown');
        }

        close(target) {
            target.setAttribute('aria-expanded', 'false');
            target.parentElement.classList.remove(CLASS_NAME_OPEN);
            dispatchCustomEvent(target, 'hidden.hc.dropdown');
        }

        closeOpened(target = `${this._options.rootEl} ${SELECTOR_DROPDOWN}.${CLASS_NAME_OPEN}`) {
            document.querySelectorAll(target).forEach((dropdown) => {
                dropdown.classList.remove(CLASS_NAME_OPEN);
                dropdown.querySelector(`${SELECTOR_DROPDOWN_BTN}[aria-expanded="true"]`).setAttribute('aria-expanded', 'false');
            });
        }

        enableDetectCollision() {
            window.addEventListener(
                'scroll',
                debounce(() => {
                    this._detectCollision(document.querySelector(`${SELECTOR_DROPDOWN}[data-collision="true"].${CLASS_NAME_OPEN}`));
                }, UI_TIMEOUTS.scrollDebounce)
            );
        }

        _detectCollision(dropdown) {
            if (!dropdown || !dropdown.getAttribute('data-collision')) return;
            const dropdownMenu = dropdown.querySelector(SELECTOR_DROPDOWN_MENU);
            const dropdownMenuHeight = dropdownMenu.getBoundingClientRect().height;
            const dropdownMenuOffset = parseInt(dropdown.getAttribute('data-offset'), 10) || 100;

            if (window.innerWidth >= 768 && dropdown.getBoundingClientRect().top < -dropdownMenuHeight - dropdownMenuOffset) {
                if (dropdownMenu.classList.contains(CLASS_NAME_REVERSE_POSITION)) {
                    dropdownMenu.classList.remove(CLASS_NAME_REVERSE_POSITION);
                }
                dropdownMenu.parentElement.classList.remove(CLASS_NAME_OPEN);
                return;
            }

            if (dropdown.getBoundingClientRect().top < dropdownMenuHeight + dropdownMenuOffset) {
                dropdownMenu.classList.add(CLASS_NAME_REVERSE_POSITION);
                return;
            }
            dropdownMenu.classList.remove(CLASS_NAME_REVERSE_POSITION);
        }

        _dropdownEvents() {
            addLiveEventListener(
                'click',
                `${this._options.rootEl} ${SELECTOR_DROPDOWN_BTN}`,
                (e) => {
                    e.stopPropagation();
                    const { target } = e;
                    const dropdownMenu = target.closest(SELECTOR_DROPDOWN).querySelector(SELECTOR_DROPDOWN_MENU);
                    const btn = target.classList.contains(CLASS_NAME_DROPDOWN_BTN) ? target : target.closest(SELECTOR_DROPDOWN_BTN);
                    if (!this._isDropdownOpen(dropdownMenu)) {
                        this.open(btn);
                        return;
                    }
                    this.close(btn);
                },
                true
            );

            document.addEventListener('click', (e) => {
                const { target } = e;
                if (target && (target.classList.contains(CLASS_NAME_DROPDOWN_BTN) || target.classList.contains(CLASS_NAME_DROPDOWN_MENU))) return;
                this.closeOpened();
            });

            if (document.querySelector(`${SELECTOR_DROPDOWN}[data-collision="true"]`)) {
                this.enableDetectCollision();
            }
        }

        _isDropdownOpen(dropdownMenu) {
            return dropdownMenu.offsetWidth > 0 || dropdownMenu.offsetHeight > 0 || dropdownMenu.getClientRects().length > 0;
        }
    }

    return Dropdown;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowGeolocation = (function () {
    const GEOLOCATION_TIMEOUT = 5000;

    class GeoLocation {
        getCoordinates() {
            return new Promise((resolve, reject) => {
                if (!navigator.permissions) {
                    return reject(new Error('Permission API is not supported'));
                }
                navigator.permissions.query({ name: 'geolocation' }).then((permission) => {
                    if (permission.state === 'granted') {
                        return navigator.geolocation.getCurrentPosition(
                            (position) => {
                                return resolve(position);
                            },
                            (error) => {
                                return reject(new Error(error.message));
                            },
                            { timeout: GEOLOCATION_TIMEOUT }
                        );
                    }
                    return resolve();
                });
            });
        }

        locate(enableHighAccuracy = true) {
            return new Promise((resolve, reject) => {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        resolve(position);
                    },
                    (error) => {
                        reject(error);
                    },
                    {
                        enableHighAccuracy: enableHighAccuracy,
                        timeout: GEOLOCATION_TIMEOUT,
                        maximumAge: 60000,
                    }
                );
            });
        }
    }

    return GeoLocation;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowBackdrop = (function () {
    const CLASS_NAME_BACKDROP = 'backdrop';

    const SELECTOR_BACKDROP = `.${CLASS_NAME_BACKDROP}`;

    const defaultOptions = {
        rootEl: 'body',
        selector: SELECTOR_BACKDROP,
        customCss: '',
        zIndex: 'z-40',
        clickCallback: null,
        hideOnClick: false,
    };

    const backdropTemplate = (selector, customCss, zIndex) =>
        `<div class="${CLASS_NAME_BACKDROP} ${selector} ${customCss} fixed inset-y-0 inset-x-0 bg-black/30 ${zIndex} outline-none"></div>`;

    class Backdrop {
        constructor(options) {
            this._options = Object.assign(cloneObj(defaultOptions), options);
            this.isVisible = false;
            this.selector = this._options.selector;
            instanceManager.set('backdrop', this._options.selector, this);
        }

        show() {
            if (!document.querySelector(this._options.rootEl)) {
                throw new Error('Element specified in rootElement does not exist');
            }
            const selector = this.selector.split('.')[1];
            const backdrop = backdropTemplate(selector, this._options.customCss, this._options.zIndex);
            if (document.querySelector(this.selector)) {
                this.hide();
            }
            appendContent(this._options.rootEl, backdrop);
            if (this._options.clickCallback) {
                document.querySelector(this.selector).addEventListener('click', this._options.clickCallback);
            }
            if (this._options.hideOnBodyClick) {
                document.body.addEventListener('click', this._hideOnClick.bind(this));
            }
            this.isVisible = true;
        }

        hide() {
            if (this._options.clickCallback) {
                document.querySelector(this.selector).removeEventListener('click', this._options.clickCallback);
            }
            if (this._options.hideOnBodyClick) {
                document.body.removeEventListener('click', this._hideOnClick.bind(this));
            }
            deleteElement(this.selector);
            this.isVisible = false;
        }

        static hideVisible() {
            instanceManager.getEl('backdrop').forEach((el) => {
                if (el.isVisible) {
                    el.hide();
                }
            });
        }

        _hideOnClick() {
            if (this.isVisible) {
                this.hide();
            }
        }
    }

    return Backdrop;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowAlert = (function () {
    const CLASS_NAME_ALERT = 'alert';
    const CLASS_NAME_ALERT_CONTENT = 'alert-content';
    const CLASS_NAME_ALERT_BTN = 'alert-btn';
    const CLASS_NAME_ALERT_BTN_CLOSE = 'alert-btn-close';
    const CLASS_NAME_ALERT_BTN_CANCEL = 'alert-btn-cancel';
    const CLASS_NAME_ALERT_BTN_CONFIRM = 'alert-btn-confirm';
    const CLASS_NAME_ALERT_BTN_EXTRA = 'alert-btn-extra';
    const CLASS_NAME_ALERT_OPEN = 'alert-open';
    const CLASS_NAME_BACKDROP_ALERT = 'backdrop-alert';
    const CLASS_NAME_HIDDEN = UI_CONSTANTS.displayHidden;
    const CLASS_NAME_SCROLL_OFF = UI_CONSTANTS.scrollDisabled;

    const SELECTOR_ALERT = `.${CLASS_NAME_ALERT}`;
    const SELECTOR_ALERT_CONTENT = `.${CLASS_NAME_ALERT_CONTENT}`;
    const SELECTOR_ALERT_BACKDROP = '.backdrop-alert';
    const SELECTOR_ALERT_BTN = `.${CLASS_NAME_ALERT_BTN}`;
    const SELECTOR_ALERT_BTN_CLOSE = `.${CLASS_NAME_ALERT_BTN_CLOSE}`;
    const SELECTOR_ALERT_BTN_CANCEL = `.${CLASS_NAME_ALERT_BTN_CANCEL}`;
    const SELECTOR_ALERT_BTN_CONFIRM = `.${CLASS_NAME_ALERT_BTN_CONFIRM}`;
    const SELECTOR_ALERT_BTN_EXTRA = `.${CLASS_NAME_ALERT_BTN_EXTRA}`;

    const defaultOptions = {
        rootEl: 'body',
        title: '',
        message: '',
        size: 'md', // sm, md, lg
        buttonsLayout: 'basic', // basic, narrow, advanced
        buttonCancel: false,
        buttonConfirm: {
            text: 'Ok',
            closeAlert: true,
            value: true,
        },
        buttonExtra: false,
        customCss: '',
    };

    const alertTemplate = (options) => `
        <div class="${CLASS_NAME_ALERT} alert flex justify-center fixed inset-y-0 inset-x-0 z-50 overflow-x-hidden outline-none ${options.customCss} ${CLASS_NAME_HIDDEN}" tabindex="0" aria-labelledby="alert-title" aria-describedby="alert-desc" aria-modal="true" role="alertdialog">
            <div class="${CLASS_NAME_ALERT_CONTENT} bg-white relative w-full pt-7 pb-9 rounded-xl overflow-y-auto mx-5 data-[size=sm]:max-w-[375px] data-[size=md]:max-w-[500px] data-[size=lg]:max-w-[625px] md:px-0" data-size="${options.size}">
                <h2 id="alert-title" class="alert-title text-center text-xl md:text-2xl text-primary-500 leading-normal w-3/4 mx-auto px-1 xl:px-0">${options.title}</h2>
                <button type="button" class="${CLASS_NAME_ALERT_BTN_CLOSE} h-7 w-7 absolute left-auto right-3 top-3 bg-white text-base-500 flex justify-center items-center border border-gray-300 rounded-full group transition-colors duration-200 ease-in-out hover:text-primary-500 xl:h-8 xl:w-8 xl:right-4 xl:top-4" aria-label="Close" data-close="true">
                    <svg class="h-4.5 w-4.5 pointer-events-none xl:h-5 xl:w-5" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                        <path d="M256-192.348 192.348-256l224-224-224-224L256-767.652l224 224 224-224L767.652-704l-224 224 224 224L704-192.348l-224-224-224 224Z"/>
                    </svg>
                </button>
                <div id="alert-desc" class="alert-message text-center font-normal mt-4 px-6 md:px-8">${options.message}</div>
                <div class="alert-btns px-5 mt-6 ${CLASS_NAME_HIDDEN} data-[layout=advanced]:grid data-[layout=advanced]:gap-3 data-[layout=advanced]:min-[375px]:grid-cols-2 md:data-[layout=narrow]:w-full md:data-[layout=narrow]:mx-auto md:data-[layout=narrow]:px-0 md:data-[layout=narrow]:max-w-[14.75rem] md:data-[layout=advanced]:px-8 md:data-[layout=advanced]:gap-4" data-layout="${options.buttonsLayout}">
                    <button type="button" class="${CLASS_NAME_ALERT_BTN} ${CLASS_NAME_ALERT_BTN_CANCEL} w-full p-2 leading-relaxed rounded-lg bg-white border border-gray-200 text-base-500 transition-color duration-200 ease-in-out hover:bg-gray-200 ${CLASS_NAME_HIDDEN}" data-close="true">${options.buttonCancel.text}</button>
                    <button type="button" class="${CLASS_NAME_ALERT_BTN} ${CLASS_NAME_ALERT_BTN_CONFIRM} w-full p-2 leading-relaxed rounded-lg bg-primary-500 border border-primary-500 transition-color duration-200 ease-in-out hover:bg-primary-300 hover:border-primary-300" data-close="${options.buttonConfirm.closeAlert}">${options.buttonConfirm.text}</button>
                </div>
                <div class="px-6 md:px-8 ${CLASS_NAME_HIDDEN}">
                    <div class="my-6 relative flex items-center justify-center h-6">
                        <div class="absolute w-full left-0 h-px bg-gray-200"></div>
                        <div class="absolute text-sm font-bold z-10 bg-white px-5">Or</div>
                    </div>
                    <button type="button" class="${CLASS_NAME_ALERT_BTN} ${CLASS_NAME_ALERT_BTN_EXTRA} w-full p-2 leading-relaxed rounded-lg bg-white border border-primary-500 text-primary-500 transition-color duration-200 ease-in-out hover:bg-primary-500 hover:text-white" data-close="${options.buttonExtra.closeAlert}">${options.buttonExtra.text}</button>
                </div>
            </div>
        </div>
    `;

    const loaderTemplate = `
        <div class="p-2 flex justify-center">
            <svg width="40" height="10" viewBox="0 0 120 30" xmlns="http://www.w3.org/2000/svg" fill="#fff">
                <circle cx="15" cy="15" r="15">
                    <animate attributeName="r" from="15" to="15" begin="0s" dur="0.8s" values="15;9;15" calcMode="linear" repeatCount="indefinite" />
                    <animate attributeName="fill-opacity" from="1" to="1" begin="0s" dur="0.8s" values="1;.5;1" calcMode="linear" repeatCount="indefinite" />
                </circle>
                <circle cx="60" cy="15" r="9" fill-opacity="0.3">
                    <animate attributeName="r" from="9" to="9" begin="0s" dur="0.8s" values="9;15;9" calcMode="linear" repeatCount="indefinite" />
                    <animate attributeName="fill-opacity" from="0.5" to="0.5" begin="0s" dur="0.8s" values=".5;1;.5" calcMode="linear" repeatCount="indefinite" />
                </circle>
                <circle cx="105" cy="15" r="15">
                    <animate attributeName="r" from="15" to="15" begin="0s" dur="0.8s" values="15;9;15" calcMode="linear" repeatCount="indefinite" />
                    <animate attributeName="fill-opacity" from="1" to="1" begin="0s" dur="0.8s" values="1;.5;1" calcMode="linear" repeatCount="indefinite" />
                </circle>
            </svg>
        </div>
    `;

    class Alert {
        constructor(options = {}) {
            this._options = Object.assign(cloneObj(defaultOptions), options);
            this._selector = SELECTOR_ALERT;
            this._promiseReject = null;
            this._promiseResolve = null;
            this._backdrop = new HappycowBackdrop({
                selector: SELECTOR_ALERT_BACKDROP,
                customCss: CLASS_NAME_BACKDROP_ALERT,
            });
        }

        open(options) {
            if (options) {
                this._options = Object.assign(cloneObj(defaultOptions), options);
            }
            return new Promise((resolve, reject) => {
                this.close();
                const alertBasic = alertTemplate(this._options);
                appendContent(this._options.rootEl, alertBasic);
                this._promiseResolve = resolve;
                this._promiseReject = reject;
                this._setButtons(this._options);
                this._setHeight();
                this._toggleVisibility();
                this._toggleBackdrop(true);
                this._initEvents();
                document.querySelector(this._selector).focus();
            });
        }

        close(target) {
            if (!target) {
                this.terminate();
                return;
            }
            if (this._promiseResolve && target) {
                if (target.classList.contains(CLASS_NAME_ALERT_BTN_CANCEL)) {
                    this._promiseResolve(this._options.buttonCancel.value || 0);
                    this.terminate();
                    return;
                }
                if (target.classList.contains(CLASS_NAME_ALERT_BTN_CONFIRM)) {
                    this._promiseResolve(this._options.buttonConfirm.value || 0);
                    if (this._options.buttonConfirm.closeAlert) {
                        this.terminate();
                        return;
                    }
                    this._clean();
                    return;
                }
                if (target.classList.contains(CLASS_NAME_ALERT_BTN_EXTRA)) {
                    this._promiseResolve(this._options.buttonExtra.value || 0);
                    if (this._options.buttonExtra.closeAlert) {
                        this.terminate();
                        return;
                    }
                    this._clean();
                    return;
                }
                this.terminate(true);
            }
            this.terminate();
        }

        loading() {
            if (document.querySelector(`${this._selector} ${SELECTOR_ALERT_BTN_CONFIRM}`)) {
                document.querySelector(`${this._selector} ${SELECTOR_ALERT_BTN_CONFIRM}`).innerHTML = loaderTemplate;
            }
        }

        terminate(promiseResolve = false) {
            if (promiseResolve && this._promiseResolve) {
                this._promiseResolve(0);
            }
            this._toggleVisibility();
            deleteElement(this._selector);
            this._toggleBackdrop();
            this._clean();
        }

        _setButtons(options) {
            const btnCancel = document.querySelector(`${this._selector} ${SELECTOR_ALERT_BTN_CANCEL}`);
            const btnConfirm = document.querySelector(`${this._selector} ${SELECTOR_ALERT_BTN_CONFIRM}`);
            const btnExtra = document.querySelector(`${this._selector} ${SELECTOR_ALERT_BTN_EXTRA}`);
            if (options.buttonCancel && btnCancel) {
                btnCancel.classList.remove(CLASS_NAME_HIDDEN);
            }
            if (options.buttonConfirm && btnConfirm) {
                btnConfirm.parentElement.classList.remove(CLASS_NAME_HIDDEN);
            }
            if (options.buttonExtra && btnExtra) {
                btnExtra.parentElement.classList.remove(CLASS_NAME_HIDDEN);
            }
        }

        _initEvents() {
            addLiveEventListener('click', `${this._selector} ${SELECTOR_ALERT_BTN}`, (e) => {
                e.stopImmediatePropagation();
                this.close(e.target);
            });

            addLiveEventListener('click', `${this._selector} ${SELECTOR_ALERT_BTN_CLOSE}`, (e) => {
                e.stopImmediatePropagation();
                this.terminate(true);
            });

            addLiveEventListener('keydown', `${this._selector}`, (e) => {
                e.stopImmediatePropagation();
                if (!document.querySelector(this._options.rootEl).classList.contains(CLASS_NAME_ALERT_OPEN)) {
                    return;
                }
                if (e.key && e.key.toUpperCase() === 'ESCAPE') {
                    e.preventDefault();
                    this.terminate(true);
                }
            });

            addLiveEventListener('click', `${this._selector}`, (e) => {
                e.stopImmediatePropagation();
                const selectorClass = this._selector.split('.')[1];
                if (e.target.classList.contains(selectorClass)) {
                    this.terminate(true);
                }
            });

            window.addEventListener(
                'resize',
                debounce(() => {
                    this._setHeight();
                }),
                UI_TIMEOUTS.resizeDebounce
            );
        }

        _clean() {
            this._promiseReject = null;
            this._promiseResolve = null;
        }

        _toggleVisibility() {
            if (document.querySelector(`${this._options.rootEl} ${this._selector}`)) {
                document.querySelector(this._options.rootEl).classList.toggle(CLASS_NAME_ALERT_OPEN);
                document.querySelector(this._options.rootEl).classList.toggle(CLASS_NAME_SCROLL_OFF);
                document.querySelector(this._selector).classList.toggle(CLASS_NAME_HIDDEN);
            }
        }

        _toggleBackdrop(alertOpen = false) {
            if (alertOpen) {
                this._backdrop.show();
                return;
            }
            this._backdrop.hide();
        }

        _setHeight() {
            const alert = document.querySelector(`${this._options.rootEl} ${this._selector}`);
            if (alert) {
                if (alert.querySelector(SELECTOR_ALERT_CONTENT).getBoundingClientRect().height + 60 < window.screen.availHeight) {
                    alert.classList.add('items-center');
                    alert.classList.remove('items-start');
                    return;
                }
                alert.classList.add('items-start');
                alert.classList.remove('items-center');
            }
        }
    }

    return Alert;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowModal = (function () {
    const CLASS_NAME_MODAL_NOTIFICATION = 'modal-notification';
    const CLASS_NAME_SHOW = UI_CONSTANTS.displayShow;
    const CLASS_NAME_ACTIVATED = 'activated';
    const CLASS_NAME_SCROLL_OFF = UI_CONSTANTS.scrollDisabled;
    const CLASS_NAME_MODAL_OPEN = 'modal-open';
    const CLASS_NAME_ALERT_CONFIRM_EXIT = 'alert-confirm-exit';

    const SELECTOR_MODAL = '.modal';
    const SELECTOR_MODAL_NOTIFICATION = `.${CLASS_NAME_MODAL_NOTIFICATION}`;
    const SELECTOR_SHOW = `.${CLASS_NAME_SHOW}`;
    const SELECTOR_ACTIVATED = `.${CLASS_NAME_ACTIVATED}`;
    const SELECTOR_MODAL_BACKDROP = '.backdrop-modal';

    const defaultOptions = {
        rootEl: 'body',
        selector: SELECTOR_MODAL,
    };

    const notificationTemplate = (text) => `
        <div class="${CLASS_NAME_MODAL_NOTIFICATION} p-3 flex items-center rounded-lg shadow-alert w-full" role="alert">
            <span class="shrink-0">
                <svg class="w-5 h-5" viewBox="0 -960 960 960" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M480-276.413q18.524 0 31.056-12.531 12.531-12.532 12.531-31.056v-156.413q0-18.524-12.531-31.056Q498.524-520 480-520t-31.056 12.531q-12.531 12.532-12.531 31.056V-320q0 18.524 12.531 31.056 12.532 12.531 31.056 12.531Zm0-318.804q19.033 0 31.908-12.875T524.783-640q0-19.033-12.875-31.908T480-684.783q-19.033 0-31.908 12.875T435.217-640q0 19.033 12.875 31.908T480-595.217Zm0 523.348q-84.913 0-159.345-32.118t-129.491-87.177q-55.059-55.059-87.177-129.491Q71.869-395.087 71.869-480t32.118-159.345q32.118-74.432 87.177-129.491 55.059-55.059 129.491-87.177Q395.087-888.131 480-888.131t159.345 32.118q74.432 32.118 129.491 87.177 55.059 55.059 87.177 129.491Q888.131-564.913 888.131-480t-32.118 159.345q-32.118 74.432-87.177 129.491-55.059 55.059-129.491 87.177Q564.913-71.869 480-71.869Zm0-91.001q133.043 0 225.087-92.043Q797.13-346.957 797.13-480t-92.043-225.087Q613.043-797.13 480-797.13t-225.087 92.043Q162.87-613.043 162.87-480t92.043 225.087Q346.957-162.87 480-162.87ZM480-480Z"/>
                </svg>
            </span>
            <p class="modal-notification-desc font-normal text-sm rounded-md ml-2 leading-snug">${text}</p>
        </div>
    `;

    class Modal {
        constructor(opitons) {
            this._options = Object.assign(cloneObj(defaultOptions), opitons);
            this._isOpened = false;
            this._showClass = CLASS_NAME_SHOW;
            this._backdrop = new HappycowBackdrop({
                selector: SELECTOR_MODAL_BACKDROP,
            });
        }

        init() {
            document.querySelectorAll(`[data-trigger="modal"]:not(${SELECTOR_ACTIVATED})`).forEach((item, index) => {
                item.addEventListener('click', (e) => {
                    item.classList.add(CLASS_NAME_ACTIVATED);
                    this.show(item.getAttribute('data-hc-target'), item.getAttribute('data-hc-notification'), e.target);
                });
            });

            document.querySelectorAll(`[data-release="modal"]:not(${SELECTOR_ACTIVATED})`).forEach((item, index) => {
                item.addEventListener('click', (e) => {
                    const modal = document.querySelector(`${this._options.selector}${SELECTOR_SHOW}`);
                    item.classList.add(CLASS_NAME_ACTIVATED);
                    if (modal && modal.hasAttribute('data-confirm-exit') && modal.getAttribute('data-confirm-exit') === 'true') {
                        this.close(this._options.selector, true);
                        return;
                    }
                    this.close(this._options.selector);
                });
            });

            addLiveEventListener('click', this._options.selector, (e) => {
                if (e.target.dataset.block) return;
                if (e.target.classList.contains(this._showClass)) {
                    const modal = document.querySelector(`${this._options.selector}${SELECTOR_SHOW}`);
                    if (modal && modal.hasAttribute('data-confirm-exit') && modal.getAttribute('data-confirm-exit') === 'true') {
                        this.close(this._options.selector, true);
                        return;
                    }
                    this.close(this._options.selector);
                }
            });

            addLiveEventListener('keydown', 'body', (e) => {
                const { key } = e;
                const modalEl = document.querySelector(`${this._options.selector}${SELECTOR_SHOW}`);
                if (!modalEl) return;
                if (key && key.toUpperCase() === 'ESCAPE') {
                    if (modalEl.hasAttribute('data-confirm-exit') && modalEl.getAttribute('data-confirm-exit') === 'true') {
                        this.close(this._options.selector, true);
                        return;
                    }
                    this.close(this._options.selector);
                }
            });
        }

        show(elemSelector, notificationText = '', target = null) {
            const modal = document.querySelector(elemSelector);
            if (!modal) return;
            modal.classList.add(this._showClass);
            document.querySelector(this._options.rootEl).classList.add(CLASS_NAME_MODAL_OPEN, CLASS_NAME_SCROLL_OFF);
            if (notificationText) {
                this._setNotification(elemSelector, notificationText);
            }
            if (target) {
                dispatchCustomEvent(modal, 'shown.hc.modal', target);
            }
            if (!target) {
                dispatchCustomEvent(modal, 'shown.hc.modal');
            }
            this._isOpened = true;
            this._backdrop.show();
            modal.focus();
        }

        close(elemSelector, confirmExit = false) {
            const modal = document.querySelector(`${elemSelector}${SELECTOR_SHOW}`);
            if (!modal) return;
            if (confirmExit) {
                this.confirmExit();
                return;
            }
            modal.classList.remove(this._showClass);
            document.querySelector(this._options.rootEl).classList.remove(CLASS_NAME_MODAL_OPEN, CLASS_NAME_SCROLL_OFF);
            dispatchCustomEvent(modal, 'hidden.hc.modal');
            if (document.querySelector(`${this._options.selector} ${SELECTOR_MODAL_NOTIFICATION}`)) {
                deleteElement(`${this._options.selector} ${SELECTOR_MODAL_NOTIFICATION}`);
            }
            if (modal.hasAttribute('data-modal-delete') && modal.getAttribute('data-modal-delete') === 'true') {
                deleteElement(SELECTOR_MODAL);
            }
            this._isOpened = false;
            this._backdrop.hide();
        }

        closeOpened() {
            if (this._isOpened) {
                this.close(this._options.selector);
            }
        }

        isOpened() {
            return this._isOpened;
        }

        confirmExit() {
            hcAlert
                .open({
                    title: 'Confirm Exit',
                    message: 'Are you sure you want to exit?',
                    buttonsLayout: 'advanced',
                    size: 'sm',
                    buttonCancel: {
                        text: 'Cancel',
                    },
                    buttonConfirm: {
                        text: 'Exit',
                        value: 'exit',
                        closeAlert: false,
                    },
                    customCss: CLASS_NAME_ALERT_CONFIRM_EXIT,
                })
                .then((value) => {
                    if (value === 'exit') {
                        hcAlert.terminate();
                        this.close(this._options.selector);
                    }
                    document.querySelector(`${this._options.selector}${SELECTOR_SHOW}`).focus();
                })
                .catch(() => {
                    hcAlert.terminate();
                    this.close(this._options.selector);
                });
        }

        deleteNotification() {
            if (document.querySelector(`${this._options.selector} ${SELECTOR_MODAL_NOTIFICATION}`)) {
                deleteElement(`${this._options.selector} ${SELECTOR_MODAL_NOTIFICATION}`);
            }
        }

        _setNotification(elemSelector, text) {
            if (!elemSelector || !text || text.length === 0) {
                return;
            }
            this.deleteNotification();
            const html = notificationTemplate(text);
            appendContent(`${elemSelector}${SELECTOR_SHOW} .modal-content`, html, 'afterBegin');
        }
    }

    return Modal;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowPubSub = (function () {
    class PubSub {
        constructor() {
            this._subscribers = {};
        }

        publish(eventName, data) {
            if (this._subscribers[eventName] === undefined) return;
            this._subscribers[eventName].forEach((callback) => {
                callback(data);
            });
        }

        subscribe(eventName, callback) {
            if (this._subscribers[eventName] === undefined) {
                this._subscribers[eventName] = [];
            }
            this._subscribers[eventName].push(callback);
        }
    }

    return PubSub;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowCommon = (function () {
    const CLASS_NAME_ACTIVE = UI_CONSTANTS.stateActive;
    const CLASS_NAME_SELECTED = UI_CONSTANTS.stateSelected;

    let userStatus;
    let userTimestamp;

    function authCheck() {
        return new Promise((resolve, reject) => {
            getUserData()
                .then((res) => {
                    const csrfEl = document.querySelector('._csrf');
                    if (csrfEl) {
                        csrfEl.setAttribute('name', res.data.csrf.key);
                        csrfEl.value = res.data.csrf.token;
                        csrf = getCsrf();
                    }
                    if (res.data.username) {
                        userStatus = res;
                        userTimestamp = Date.now();
                        resolve(res.data);
                        return;
                    }
                    resolve(false);
                })
                .catch(() => {
                    reject();
                });
        });
    }

    function cleanBtnStatus(selector) {
        document.querySelectorAll(selector).forEach((item) => {
            item.classList.remove(CLASS_NAME_ACTIVE, CLASS_NAME_SELECTED, 'bg-primary-500', 'bg-gray-700', 'text-white');
            item.classList.add('text-base-500');
        });
    }

    function initAppleApi() {
        return new Promise((resolve, reject) => {
            if (typeof AppleID === 'undefined') {
                loadJs(Config.apple.authUrl)
                    .then(() => {
                        const csrfData = getCsrf();
                        AppleID.auth.init({
                            clientId: Config.apple.authClientId,
                            scope: 'name email',
                            redirectURI: Config.apple.redirectURI,
                            state: csrfData.value,
                            usePopup: true, // or false defaults to false
                        });
                        resolve();
                    })
                    .catch(() => {
                        reject();
                    });
                return;
            }
            resolve();
        });
    }

    function initGoogleApi() {
        return new Promise((resolve, reject) => {
            loadJs(Config.google.accountsClientUrl)
                .then(() => {
                    google.accounts.id.initialize({
                        client_id: Config.google.accountsClientId,
                        ux_mode: 'popup',
                        callback: (credentialResponse) => {
                            if (credentialResponse && credentialResponse.credential) {
                                if (document.querySelector('#profile-profile .edit-profile-form')) {
                                    attachSignin(credentialResponse.credential);
                                    return;
                                }
                                hcAuth.googleLogin(credentialResponse.credential).then((data) => {
                                    handleResponse(data, 'gg');
                                });
                            }
                        },
                    });

                    resolve({
                        googleApiAccounts: google.accounts.id,
                        googleApiLoaded: true,
                    });
                })
                .catch(() => {
                    reject();
                });
        });
    }

    function isUserStatusValid() {
        if (!userStatus) return false;
        const diff = Math.floor((Date.now() - userTimestamp) / 1000);
        return diff < 300;
    }

    function linkify(el) {
        linkifyElement(document.querySelector(el), {
            target: '_blank',
            attributes: {
                rel: 'nofollow noreferrer noopener',
            },
            className: 'linkified text-primary-500',
        });
    }

    function getCsrf() {
        const csrfEl = document.querySelector('._csrf');
        if (!csrfEl) return false;
        return { name: csrfEl.getAttribute('name'), value: csrfEl.value };
    }

    function getUserData() {
        return new Promise((resolve, reject) => {
            if (isUserStatusValid()) return resolve(userStatus);
            const pageUrl = document.body.getAttribute('id');
            get(`/ajax/user-data?page=${pageUrl}`, { target: false })
                .then((res) => {
                    if (res.success) {
                        userStatus = res;
                        userTimestamp = Date.now();
                    }
                    resolve(res);
                })
                .catch((err) => {
                    reject(err);
                });
        });
    }

    function setBtnStatus(el, secondaryStyle = false) {
        if (el.classList.contains(CLASS_NAME_ACTIVE)) {
            el.classList.add('text-base-500');
            el.classList.remove(CLASS_NAME_ACTIVE, CLASS_NAME_SELECTED, 'bg-primary-500', 'bg-gray-700', 'text-white');
            return;
        }
        el.classList.remove('text-base-500');
        if (secondaryStyle) {
            el.classList.add(CLASS_NAME_ACTIVE, CLASS_NAME_SELECTED, 'bg-gray-700', 'text-white');
            return;
        }
        el.classList.add(CLASS_NAME_ACTIVE, CLASS_NAME_SELECTED, 'bg-primary-500', 'text-white');
    }

    function startLoading(targetSelector) {
        if (targetSelector === false) return;
        const target = document.querySelector(targetSelector);
        if (target) {
            target.classList.add('opacity-50', 'cursor-pointer', 'pointer-events-none');
            return;
        }
        document.body.classList.add('opacity-50', 'cursor-pointer', 'pointer-events-none');
    }

    function stopLoading(targetSelector) {
        if (targetSelector === false) return;
        const target = document.querySelector(targetSelector);
        if (target) {
            target.classList.remove('opacity-50', 'cursor-pointer', 'pointer-events-none');
            return;
        }
        document.body.classList.remove('opacity-50', 'cursor-pointer', 'pointer-events-none');
    }

    return {
        authCheck,
        cleanBtnStatus,
        initAppleApi,
        initGoogleApi,
        linkify,
        getCsrf,
        getUserData,
        setBtnStatus,
        startLoading,
        stopLoading,
    };
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowSidebar = (function () {
    const CLASS_NAME_BACKDROP_SIDEBAR = 'backdrop-sidebar';

    const SELECTOR_SIDEBAR_BTN = '#btn-sidebar';
    const SELECTOR_SIDEBAR_BACKDROP = `.${CLASS_NAME_BACKDROP_SIDEBAR}`;
    const SELECTOR_NAVBAR_COLLAPSE = '.navbar-collapse';
    const SELECTOR_NAVBAR_FORM_ID = 'location-nearby-form-navbar';
    const SELECTOR_FORM_LAT_ID = 'lat-nearby-navbar';
    const SELECTOR_FORM_LNG_ID = 'lng-nearby-navbar';

    const CLICK_THROTTLE_TIMEOUT = 200;

    class Sidebar {
        constructor() {
            this._isOpen = false;
            this._errTimeout = null;
            this._isDesktop = window.matchMedia('(min-width: 1200px)');
            this._btnSidebar = document.querySelector(SELECTOR_SIDEBAR_BTN);
            this._navbarCollapse = document.querySelector(SELECTOR_NAVBAR_COLLAPSE);
            this._backdrop = new HappycowBackdrop({
                selector: SELECTOR_SIDEBAR_BACKDROP,
                customCss: CLASS_NAME_BACKDROP_SIDEBAR,
                zIndex: 'z-20',
                clickCallback: this.close.bind(this),
            });
            this._geoLocation = new HappycowGeolocation();
        }

        init() {
            addLiveEventListener(
                'click',
                SELECTOR_SIDEBAR_BTN,
                throttle(() => {
                    if (!this._isOpen) {
                        this.open();
                        return;
                    }
                    this.close();
                }, CLICK_THROTTLE_TIMEOUT)
            );

            window.addEventListener(
                'resize',
                debounce(() => {
                    if (this._isDesktop.matches && this._isOpen) {
                        this.close();
                        return;
                    }
                    if (!this._isDesktop.matches && this._navbarCollapse) {
                        this._navbarCollapse.style.setProperty('--mobile-height', `${window.innerHeight - 71}px`);
                    }
                }),
                UI_TIMEOUTS.resizeDebounce
            );

            addLiveEventListener('click', '#geolocate-user-nearby-btn', (e) => {
                e.preventDefault();
                this._errTimeout = setTimeout(this._navbarGeoError, 10000);
                const form = document.getElementById(SELECTOR_NAVBAR_FORM_ID);
                HappycowToastr.success('Detecting your location, please wait...');
                this._geoLocation
                    .locate()
                    .then((position) => {
                        clearTimeout(this._errTimeout);
                        document.getElementById(SELECTOR_FORM_LAT_ID).value = position.coords.latitude;
                        document.getElementById(SELECTOR_FORM_LNG_ID).value = position.coords.longitude;
                        HappycowCookies.deleteCookie('hcsearchopts', '/');
                        form.submit();
                    })
                    .catch(() => {
                        this._navbarGeoError();
                    });
            });
        }

        open() {
            this._navbarCollapse.setAttribute('data-open', 'true');
            this._btnSidebar.setAttribute('data-open', 'true');
            hcDropdown.closeOpened('.navbar-nav .dropdown.open');
            HappycowBackdrop.hideVisible();
            this._backdrop.show();
            this._isOpen = true;
        }

        close() {
            if (!this._isOpen) return;
            this._navbarCollapse.setAttribute('data-open', 'false');
            this._btnSidebar.setAttribute('data-open', 'false');
            hcDropdown.closeOpened('.navbar-nav .dropdown.open');
            this._backdrop.hide();
            this._isOpen = false;
        }

        _navbarGeoError() {
            clearTimeout(this._errTimeout);
            const form = document.getElementById(SELECTOR_NAVBAR_FORM_ID);
            document.getElementById(SELECTOR_FORM_LAT_ID).value = form.dataset.ipLat;
            document.getElementById(SELECTOR_FORM_LNG_ID).value = form.dataset.ipLng;
            HappycowCookies.deleteCookie('hcsearchopts', '/');
            form.submit();
        }
    }

    return Sidebar;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowValidator = (function () {
    const CLASS_NAME_BORDER_COLOR_ERROR = `border-${UI_CONSTANTS.colorError}`;

    const SELECTOR_FORM_GROUP = '.form-group';
    const SELECTOR_HELP_BLOCK = '.help-block';

    const emailRegex =
        /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    class Validator {
        constructor() {
            this._usernameCheckMessage = '';
            this._emailCheckMessage = '';
            this._controller = null;
            this._emailController = null;
            this._state = [];
        }

        init() {
            document.querySelectorAll('[data-validator="check"]:not(.activated)').forEach((form) => {
                form.classList.add('activated');

                form.addEventListener('keyup', (e) => {
                    this.check(form, true);
                });

                form.addEventListener('change', (e) => {
                    this.check(form, true);
                });
            });
        }

        check(form, activeOnly = true, highlight = true) {
            return new Promise((resolve, reject) => {
                const promises = [];
                const requiredFields = form.querySelectorAll('[required]');
                const formKey = form.id;
                if (!this._state[formKey]) this._state[formKey] = {};
                requiredFields.forEach((item, index) => {
                    if (item.id.length == 0 || !item.id) {
                        item.id = this._uid();
                    }
                    if (!this._state[formKey][item.id]) {
                        this._state[formKey][item.id] = false;
                    }
                    if (item == document.activeElement || !activeOnly) {
                        promises.push(this.validate(item, highlight));
                    }
                });
                Promise.all(promises)
                    .then((values) => {
                        values.forEach((item) => {
                            this._state[formKey][item[0].id] = item[1];
                            this.isValid(form);
                        });
                        resolve(this.isValid(form));
                    })
                    .catch((e) => {
                        reject(e);
                    });
            });
        }

        isValid(form) {
            const formKey = form.id;
            return Object.keys(this._state[formKey]).every((k) => {
                return this._state[formKey][k] === true;
            });
        }

        validate(item, highlight = true) {
            return new Promise((resolve, reject) => {
                const helpBlock = this._getHelpBlock(item);
                this._isInvalid(item)
                    .then((validationArr) => {
                        for (const validation of validationArr) {
                            if (validation.invalid) {
                                if (highlight) item.classList.add(CLASS_NAME_BORDER_COLOR_ERROR);
                                if (helpBlock && highlight) {
                                    helpBlock.innerText = validation.message;
                                }
                                resolve([item, false]);
                                return;
                            }
                        }
                        if (highlight) item.classList.remove(CLASS_NAME_BORDER_COLOR_ERROR);
                        if (helpBlock && highlight) {
                            helpBlock.innerText = '';
                        }
                        resolve([item, true]);
                    })
                    .catch((e) => {
                        reject();
                    });
            });
        }

        validateURL(textURL) {
            let dataURL = {};
            let currentURL = textURL;
            if (!currentURL.startsWith('http://') && !currentURL.startsWith('https://')) {
                currentURL = `https://${currentURL}`;
            }

            try {
                const baseURL = new URL(currentURL);
                const host = baseURL.host.split('.');
                let newURL = baseURL.href;
                if (baseURL.host.startsWith('www') && host.length < 3) {
                    dataURL.valid = false;
                    return dataURL;
                }
                if (host.length < 2) {
                    dataURL.valid = false;
                    return dataURL;
                }
                if (/(\d+\.\d+.\d+.\d+)/g.test(baseURL.host)) {
                    dataURL.valid = false;
                    return dataURL;
                }
                if (baseURL.port || baseURL.username || baseURL.password) {
                    dataURL.valid = false;
                    return dataURL;
                }
                if (baseURL.search) {
                    newURL = newURL.split('?')[0];
                    if (baseURL.hash) {
                        newURL = `${newURL}${baseURL.hash}`;
                    }
                }
                dataURL = {
                    href: baseURL.href,
                    cleanURL: newURL,
                    oldURL: textURL,
                    valid: true,
                };
                return dataURL;
            } catch (err) {
                dataURL.valid = false;
                return dataURL;
            }
        }

        clean(form) {
            const formKey = form.id;
            if (this._state[formKey]) {
                delete this._state[formKey];
            }
        }

        _uid() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        }

        _isInvalid(item) {
            const minLength = item.dataset.minLength || false;
            const maxLength = item.dataset.maxLength || false;
            const email = item.dataset.email || false;
            const emailCheck = item.dataset.emailCheck || false;
            const usernameCheck = item.dataset.usernameCheck || false;
            const contains = item.dataset.contains || false;
            const emptyOk = item.dataset.empty || false;
            const checkboxCheck = item.dataset.checkboxCheck || false;

            let pArr = [this._validateEmpty(item)];
            if (emptyOk) {
                pArr = [];
            }

            if (contains) {
                pArr.push(this._validateContains(item));
            }
            if (email) {
                pArr.push(this._validateEmail(item));
            }
            if (emailCheck) {
                pArr.push(this._validateEmailCheck(item));
            }
            if (usernameCheck) {
                pArr.push(this._validateUsernameCheck(item));
            }
            if (minLength) {
                pArr.push(this._validateMinLength(item));
            }
            if (maxLength) {
                pArr.push(this._validateMaxLength(item));
            }
            if (checkboxCheck) {
                pArr.push(this._validateCheckbox(item));
            }
            return Promise.all(pArr);
        }

        _validateEmpty(item) {
            return new Promise((resolve, reject) => {
                resolve({ invalid: item.value.trim().length == 0, message: this._getErrorMessage(item, 99) });
            });
        }

        _validateCheckbox(item) {
            return new Promise((resolve, reject) => {
                const invalid = !item.checked;
                resolve({ invalid: invalid, message: this._getErrorMessage(item, 6) });
            });
        }

        _validateMaxLength(item) {
            return new Promise((resolve, reject) => {
                const maxLength = item.dataset.maxLength || false;
                resolve({ invalid: item.value.trim().length == 0 || item.value.trim().length > maxLength, message: this._getErrorMessage(item, 0) });
            });
        }

        _validateMinLength(item) {
            return new Promise((resolve, reject) => {
                const minLength = item.dataset.minLength || false;
                resolve({ invalid: item.value.trim().length == 0 || item.value.trim().length < minLength, message: this._getErrorMessage(item, 1) });
            });
        }

        _validateUsernameCheck(item) {
            return new Promise((resolve, reject) => {
                this._checkUsername(item.value.trim()).then((status) => {
                    resolve({ invalid: status, message: this._getErrorMessage(item, 3) });
                });
            });
        }

        _validateEmailCheck(item) {
            return new Promise((resolve, reject) => {
                this._checkEmail(item.value.trim()).then((status) => {
                    resolve({ invalid: status, message: this._getErrorMessage(item, 4) });
                });
            });
        }

        _validateEmail(item) {
            return new Promise((resolve, reject) => {
                const emptyOk = item.dataset.empty || false;
                let invalid = item.value.trim().length == 0 || !this._validateEmailHelper(item.value.trim());
                if (emptyOk && item.value.trim().length == 0) {
                    invalid = false;
                }
                resolve({ invalid: invalid, message: this._getErrorMessage(item, 2) });
            });
        }

        _validateContains(item) {
            return new Promise((resolve, reject) => {
                const contains = item.dataset.contains || false;
                if (!contains) resolve({ invalid: false, message: this._getErrorMessage(item, 5) });
                const regex = new RegExp(contains, 'i');
                const invalid = item.value.match(regex) === null;
                resolve({ invalid: invalid, message: this._getErrorMessage(item, 5) });
            });
        }

        _validateEmailHelper(email) {
            return emailRegex.test(email);
        }

        _getHelpBlock(item) {
            let helpBlock = getNextSibling(item, SELECTOR_HELP_BLOCK);
            if (helpBlock) {
                return helpBlock;
            }
            helpBlock = getNextSibling(item.parentElement, SELECTOR_HELP_BLOCK);
            if (helpBlock) {
                return helpBlock;
            }
            const closest = item.closest(SELECTOR_FORM_GROUP);
            if (!closest) return null;
            helpBlock = closest.querySelector(SELECTOR_HELP_BLOCK);
            return helpBlock;
        }

        _getErrorMessage(item, type) {
            const maxLength = item.dataset.maxLength || 65000;
            const minLength = item.dataset.minLength || 0;

            switch (type) {
                case 0:
                    return item.dataset.message || `Maximum of ${maxLength} characters`;
                case 1:
                    return item.dataset.message || `Minimum of ${minLength} characters`;
                case 2:
                    return item.dataset.message || 'A valid email is required';
                case 3:
                    return this._usernameCheckMessage || 'This username cannot be used';
                case 4:
                    return this._emailCheckMessage || 'This email cannot be used';
                case 5:
                    return item.dataset.containsText || 'Required field';
                case 6:
                    return item.dataset.containsText || 'This checkbox is required';
                default:
                    return item.dataset.message || 'Required field';
            }
        }

        async _checkUsername(username) {
            if (this._controller) {
                this._controller.abort();
                this._controller = null;
            }
            this._controller = new AbortController();
            const signal = this._controller.signal;
            const usernameEncoded = encodeURIComponent(username);
            try {
                const response = await get(`/ajax/username/check?username=${usernameEncoded}`, { target: false, signal: signal });
                if (!response.success) {
                    this._usernameCheckMessage = response.message;
                    return true;
                }
            } catch (error) {
                HappycowErrorReporter.logError({ error }, false);
            }
            return false;
        }

        async _checkEmail(email) {
            if (this._emailController) {
                this._emailController.abort();
                this._emailController = null;
            }
            this._emailController = new AbortController();
            const signal = this._emailController.signal;
            const emailEncoded = encodeURIComponent(email);
            try {
                const response = await get(`/ajax/email/check?email=${emailEncoded}`, { target: false, signal: signal });
                if (!response.success) {
                    this._emailCheckMessage = response.message;
                    return true;
                }
            } catch (error) {
                HappycowErrorReporter.logError({ error }, false);
            }
            return false;
        }
    }

    return Validator;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowAuthentication = (function () {
    class Authentication {
        login(user, password, remember) {
            const formData = new FormData();
            formData.append(csrf.name, csrf.value);
            formData.append('username', user);
            formData.append('password', password);
            formData.append('remember', remember);
            return this._request('/ajax/login', formData);
        }

        facebookLogin(accessToken) {
            const formData = new FormData();
            formData.append(csrf.name, csrf.value);
            formData.append('token', accessToken);
            return this._request('/ajax/login/facebook', formData);
        }

        googleLogin(token) {
            const formData = new FormData();
            formData.append(csrf.name, csrf.value);
            formData.append('token', token);
            return this._request('/ajax/login/google', formData);
        }

        appleLogin(token) {
            const formData = new FormData();
            formData.append(csrf.name, csrf.value);
            formData.append('token', token);
            return this._request('/ajax/login/apple', formData);
        }

        _request(url, formData) {
            return new Promise((resolve, reject) => {
                post(url, formData)
                    .then((data) => {
                        if (data.success) {
                            return resolve(data);
                        }
                        return resolve(data);
                    })
                    .catch((error) => {
                        return reject(UI_ERROR_MESSAGES.fallback);
                    });
            });
        }
    }

    return Authentication;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowMemberNotifications = (function () {
    const CLASS_NAME_SCROLL_OFF = UI_CONSTANTS.scrollDisabled;

    const ERROR_MESSAGE_TEXT = "Sorry, we're not able to load your notifications at the moment. Please try again soon.";

    class MemberNotifications {
        constructor() {
            this._lastScrollFireTime = 0;
            this._lastScrollTop = 0;
            this._currentPage = -1;
            this._limit = 18;
            this._readAll = true;
            this._notificationsDropdowns = document.querySelectorAll('.navbar-notifications .dropdown');
            this._isMobile = window.matchMedia('(max-width: 1199px)');
            this._controller = undefined;
            this._scrollTimer = undefined;
        }

        init() {
            this._bind();
        }

        _bind() {
            addOnEventListener('click', '#btn-close-user-dropdown', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
            });

            addOnEventListener('click', '#btn-hide-message', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
            });

            addOnEventListener('click', '#btn-hide-notifications', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
            });

            addLiveEventListener('hidden.hc.dropdown', '#btn-open-user-dropdown', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
            });

            addLiveEventListener('hidden.hc.dropdown', '#btn-open-notifications', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
                this._readAll = false;
            });

            addLiveEventListener('hidden.hc.dropdown', '#btn-open-message', () => {
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                    }
                });
            });

            addLiveEventListener('shown.hc.dropdown', '#btn-open-user-dropdown', () => {
                hcSidebar.close();
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.add(CLASS_NAME_SCROLL_OFF);
                    }
                    HappycowBackdrop.hideVisible();
                });
            });

            addLiveEventListener('shown.hc.dropdown', '#btn-open-message', () => {
                hcSidebar.close();
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.add(CLASS_NAME_SCROLL_OFF);
                    }
                    HappycowBackdrop.hideVisible();
                });
            });

            addLiveEventListener('shown.hc.dropdown', '#btn-open-notifications', () => {
                hcSidebar.close();
                requestAnimationFrame(() => {
                    if (this._isMobile.matches) {
                        document.body.classList.add(CLASS_NAME_SCROLL_OFF);
                    }
                    HappycowBackdrop.hideVisible();
                    if (this._readAll) this._markAllRead();
                    this._readAll = false;
                });
            });

            addLiveEventListener('click', '.navbar [data-analytics="notification-feed"]', () => {
                HappycowAnalytics.gtagEvent('notif_card_select');
            });

            window.addEventListener(
                'resize',
                debounce(() => {
                    if (this._isMobile.matches) {
                        this._notificationsDropdowns.forEach((dropdown) => {
                            if (dropdown.classList.contains('open')) {
                                document.body.classList.add(CLASS_NAME_SCROLL_OFF);
                            }
                        });
                        return;
                    }
                    this._notificationsDropdowns.forEach((dropdown) => {
                        if (dropdown.classList.contains('open')) {
                            document.body.classList.remove(CLASS_NAME_SCROLL_OFF);
                        }
                    });
                }, UI_TIMEOUTS.resizeDebounce)
            );

            this._scrollBind();
        }

        _markAllRead() {
            const formData = new FormData();
            post('/ajax/views/members/notifications/read', formData, { target: false })
                .then(() => {
                    const badge = document.querySelector('.navbar-notifications .dropdown-notifications .badge-unread-messages');
                    if (badge) badge.remove();
                })
                .catch((error) => {
                    HappycowErrorReporter.logError({ error }, false);
                });
        }

        _getNotificationSelector() {
            return this._isMobile.matches
                ? '.navbar-notifications .dropdown-menu-notifications'
                : '.navbar-notifications .dropdown-notifications .dropdown-content';
        }

        _scrollBind() {
            const notificationSelector = this._getNotificationSelector();
            addOnEventListener('scroll', notificationSelector, () => {
                const minScrollTime = 200;
                const now = new Date().getTime();

                if (!this._scrollTimer) {
                    if (now - this._lastScrollFireTime > 3 * this._minScrollTime) {
                        this._processScroll(notificationSelector);
                        this._lastScrollFireTime = now;
                    }
                    this._scrollTimer = setTimeout(() => {
                        this._scrollTimer = null;
                        this._lastScrollFireTime = new Date().getTime();
                        this._processScroll(notificationSelector);
                    }, minScrollTime);
                }
            });
        }

        _processScroll(notificationSelector) {
            if (this._controller) return;

            const boxContent = document.querySelector(notificationSelector);
            const st = (100 * boxContent.scrollTop) / (boxContent.scrollHeight - boxContent.clientHeight);
            if (st >= this._lastScrollTop) {
                if (st > 60) {
                    this._getNotifications();
                }
            }
            this._lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling
        }

        _getNotifications() {
            const offset = document.querySelectorAll('.navbar-notifications .dropdown-notifications .dropdown-content li').length;
            const page = Math.floor(offset / this._limit) + 1;
            if (this._currentPage >= page) {
                return;
            }
            this._currentPage = page;

            if (this._controller) this._controller.abort();
            this._controller = new AbortController();
            const signal = this._controller.signal;

            get(`/ajax/views/members/notifications?offset=${offset}&limit=${this._limit}`, { signal: signal, target: false })
                .then(({ data, success }) => {
                    if (success) {
                        requestAnimationFrame(() => {
                            const notificationSelector = this._getNotificationSelector();
                            appendContent(`${notificationSelector} .dropdown-list`, data);
                            hcLazyLoadImages.setLazyLoadObserve('.dropdown-list');
                            HappycowAnalytics.gtagEvent('notif_feed_loaded');
                        });
                        return;
                    }
                    HappycowToastr.error(ERROR_MESSAGE_TEXT);
                })
                .catch((error) => {
                    if (error.name !== 'AbortError') {
                        HappycowErrorReporter.logError({ error }, ERROR_MESSAGE_TEXT);
                    }
                })
                .finally(() => {
                    this._controller = null;
                });
        }
    }

    return MemberNotifications;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowForm = (function () {
    class Form {
        constructor() {
            this._forms = null;
            this._formsSelector = '';
            this._formChanges = false;
        }

        init(formSelector) {
            this._forms = document.querySelectorAll(formSelector);
            this._formsSelector = formSelector;

            if (this._forms.length == 0) return;

            this.setInitialState();

            addLiveEventListener('submit', formSelector, () => {
                this.setInitialState();
            });

            addLiveEventListener('reset', formSelector, () => {
                this.setInitialState();
            });

            window.addEventListener('beforeunload', (e) => {
                this._formChanges = this._formHasChanges();
                if (this._formChanges) {
                    e.preventDefault();
                    e.returnValue = '';
                }
            });
        }

        setInitialState() {
            this._forms.forEach((form) => {
                for (let i = 0; i < form.length; i++) {
                    const el = form[i];
                    if (el.id === 'g-recaptcha-response') continue;
                    el.dataset.origValue = el.value;
                }
            });
        }

        _formHasChanges() {
            let changed = false;
            document.querySelectorAll(this._formsSelector).forEach((form) => {
                for (let i = 0; i < form.length; i++) {
                    const el = form[i];
                    if ('origValue' in el.dataset && el.dataset.origValue !== el.value) {
                        changed = true;
                    }
                }
            });
            return changed;
        }
    }

    return Form;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowAnalytics = (function () {
    const COOKIE_ANALYTICS = 'happycow-cookie-analytics';
    const CONSENT_ID_ANALYTICS = Config.consentIds.analytics;

    class Analytics {
        constructor() {
            this._socket = '';
            this._cmp = null;
            this._cookieAnalytics = null;
            this._isUserInEurope = null;
        }

        init() {
            const paramsEl = document.getElementById('params');

            this._cmp = HappycowCmp;
            this._cookieAnalytics = HappycowCookies.getCookie(COOKIE_ANALYTICS) || null;
            this._isUserInEurope = paramsEl ? paramsEl.dataset.isUserInEurope : null;

            if (this._isUserInEurope) {
                this._isUserInEurope = parseInt(this._isUserInEurope, 10);
            }

            if (this._cookieAnalytics) {
                this._cookieAnalytics = parseInt(this._cookieAnalytics, 10);
            }

            this._enableHappyCowAnalytics();

            if (this._isUserInEurope === 1) {
                this._cmpEvents();
                if (this._cmp && this._cmp.isGpdrLoaded() && this._cmp.getUserPublisherConsent('customConsents', CONSENT_ID_ANALYTICS)) {
                    this._enableGtag();
                    return;
                }
                if (this._cookieAnalytics === 1) {
                    this._enableGtag();
                }
                return;
            }

            if (this._isUserInEurope === 0) {
                HappycowCookies.setCookie(COOKIE_ANALYTICS, '1', { expires: 365, path: '/' });
            }
        }

        triggerEvent(action, params = {}) {
            const packet = {
                type: 'event',
                action: action,
                platform: this._getPlatform(),
                params: params,
            };
            if (this._socket && this._socket.readyState == 1) {
                this._socket.send(JSON.stringify(packet));
            }
        }

        gtagEvent(actionName, options) {
            if (!window.gtag || !window.dataLayer) return;
            if (options) {
                gtag('event', actionName, options);
                return;
            }
            gtag('event', actionName);
        }

        gtagSet(property, options = {}) {
            if (!window.gtag || !window.dataLayer) return;
            if (property) {
                gtag('set', property, options);
                return;
            }
            gtag('set', options);
        }

        gtagEventLink(target, actionName, options) {
            if (!window.gtag || !window.dataLayer) return;
            if (options) {
                addLiveEventListener('mousedown', target, (e) => {
                    if (e.button === 0 || e.button === 1) {
                        HappycowAnalytics.gtagEvent(actionName, options);
                    }
                });
                return;
            }
            addLiveEventListener('mousedown', target, (e) => {
                if (e.button === 0 || e.button === 1) {
                    HappycowAnalytics.gtagEvent(actionName);
                }
            });
        }

        gtagEventCheck(selector, actionName, options) {
            if (!window.gtag || !window.dataLayer) return;
            if (!selector || !document.querySelector(selector)) return;
            if (options) {
                HappycowAnalytics.gtagEvent(actionName, options);
                return;
            }
            HappycowAnalytics.gtagEvent(actionName);
        }

        _enableHappyCowAnalytics() {
            this._socket = new WebSocket(`wss://${window.location.hostname}/analytics_socket`);
            this._socket.onopen = function (e) {};
            this._socket.onmessage = function (e) {};
            this._socket.onclose = function (e) {};
            this._socket.onerror = function (e) {};
        }

        _getPlatform() {
            const userAgent = navigator.userAgent || navigator.vendor || window.opera;
            if (/android/i.test(userAgent)) {
                return 1;
            }
            if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
                return 0;
            }

            return 2;
        }

        _cmpEvents() {
            addLiveEventListener('hc.cmp', 'body', (e) => {
                const { detail } = e;
                this._setupGtagConsents(detail.customConsents[CONSENT_ID_ANALYTICS]);
            });
        }

        _disableGtag() {
            gtag('consent', 'update', {
                analytics_storage: 'denied',
            });
            HappycowCookies.setCookie(COOKIE_ANALYTICS, '0', { expires: 365, path: '/' });
        }

        _enableGtag() {
            gtag('consent', 'update', {
                analytics_storage: 'granted',
            });
            HappycowCookies.setCookie(COOKIE_ANALYTICS, '1', { expires: 365, path: '/' });
        }

        _setupGtagConsents(consentAnalytics) {
            if (this._isUserInEurope === 1) {
                if (consentAnalytics) {
                    this._enableGtag();
                    return;
                }
                this._disableGtag();
            }
        }
    }

    return new Analytics();
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowCookies = (function () {
    const defaultOptions = {
        path: '/',
    };

    class Cookies {
        setCookie(key, value, options) {
            if (!navigator.cookieEnabled) {
                return false;
            }

            let cookieValue = `${this._encode(key)}=${this._encode(value)}`;

            if (options) {
                Object.assign(cloneObj(defaultOptions), options);
            }

            if (options.expires) {
                const date = new Date();
                date.setTime(date.getTime() + options.expires * 60 * 60 * 24 * 1000);
                cookieValue += `; expires=${date.toUTCString()}`;
            }

            if (options.path) {
                cookieValue += `; path=${options.path}`;
            }

            if (options.domain) {
                cookieValue += `; domain=${options.domain}`;
            }

            if (options.secure) {
                cookieValue += '; secure';
            }

            if (options.samesite) {
                cookieValue += `; samesite=${options.samesite}`;
            }

            document.cookie = cookieValue;
        }

        getCookie(key) {
            if (!document.cookie) return false;
            const cookies = this._decode(document.cookie).split(/; */);
            for (const cookie of cookies) {
                const cookieArr = cookie.split('=');
                if (cookieArr[0] === this._decode(key)) {
                    return cookieArr[1];
                }
            }
            return undefined;
        }

        deleteCookie(key, path) {
            if (!document.cookie) return false;
            const cookieValue = this._encode(key);
            if (path) {
                document.cookie = `${cookieValue}=;expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}`;
                return;
            }
            document.cookie = `${cookieValue}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
        }

        deleteAllCookies() {
            if (!document.cookie) return false;
            const cookies = this._decode(document.cookie).split(/; */);
            for (const cookie of cookies) {
                const cookieArr = cookie.split('=');
                document.cookie = `${cookieArr[0]}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
            }
        }

        _encode(value) {
            return String(value).replace(/[,;"\\=\s%]/g, (character) => encodeURIComponent(character));
        }

        _decode(value) {
            return decodeURIComponent(value);
        }
    }

    return new Cookies();
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowFormRegister = (function () {
    class FormRegister {
        constructor() {
            this._state = {};
            this._form = null;
        }

        init(form) {
            if (!form) return;
            this._form = document.querySelector(form);
        }

        getState() {
            return this._state;
        }

        setState() {
            const fields = this._form.querySelectorAll('input, select');

            if (fields.length === 0) return;

            for (const field of fields) {
                if (field.tagName === 'select') {
                    this._state[field.name] = field.selectedOptions[0].value;
                } else if (field.name === 'lat' && !field.value) {
                    this._state.lat = 0;
                } else if (field.name === 'lng' && !field.value) {
                    this._state.lng = 0;
                } else if (field.type === 'checkbox') {
                    this._state[field.name] = field.checked ? 1 : 0;
                } else {
                    this._state[field.name] = field.value;
                }
            }
        }

        clearState() {
            for (const prop of Object.keys(this._state)) {
                delete this._state[prop];
            }
        }

        getStateItem(key) {
            return this._state[key];
        }

        setItemValue() {
            const fields = this._form.querySelectorAll('input, select');
            for (const field of fields) {
                for (const prop of Object.keys(this._state)) {
                    if (field.tagName === 'select' && field.name == prop) {
                        field.value = this._state[prop];
                    } else if (field.type === 'checkbox' && field.name === prop) {
                        field.checked = this._state[prop];
                    } else if (field.name === prop) {
                        field.value = this._state[prop];
                    }
                }
            }
        }

        register(token, container, modal = false) {
            const formData = new FormData();

            HappycowAnalytics.gtagEvent('signup_submit');

            Object.keys(this._state).forEach((key) => formData.append(key, this._state[key]));

            formData.append(csrf.name, csrf.value);
            formData.append('g-recaptcha-response', token);

            post('/ajax/register', formData)
                .then(({ message, redirect, success, view }) => {
                    if (success) {
                        if (redirect) {
                            window.location.href = redirect;
                            return;
                        }
                        emptyElement(container);
                        appendContent(container, view);
                        this.clearState();
                        if (modal) {
                            document.querySelector('#authentication-modal').classList.remove('modal-register-step-2');
                            document.querySelector('#authentication-modal').classList.add('modal-register-step-3');
                        }
                        if (this._form.getAttribute('data-is-social') === '1') {
                            HappycowAnalytics.gtagEvent('sign_up', {
                                method: 'social',
                            });
                            return;
                        }
                        HappycowAnalytics.gtagEvent('sign_up', {
                            method: 'hc',
                        });
                        return;
                    }
                    HappycowToastr.error(message || UI_ERROR_MESSAGES.fallback);
                })
                .catch((error) => {
                    HappycowErrorReporter.logError({ error });
                });
        }
    }

    return FormRegister;
})();
;/*
 * Copyright (C) HappyCow - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

var HappycowGoogleRecaptcha = (function () {
    class GoogleRecaptcha {
        constructor() {
            this._rootEl = document.body;
        }

        init() {
            if (document.querySelector('.g-recaptcha')) {
                this._loadGoogleRecaptcha(Config.google.recaptcha.url);
            }
        }

        setGoogleRecaptcha(alternativeRecaptcha = false) {
            if (alternativeRecaptcha) {
                this._loadGoogleRecaptcha(Config.google.recaptcha.altUrl);
                return;
            }
            this._loadGoogleRecaptcha(Config.google.recaptcha.url);
        }

        _loadGoogleRecaptcha(url) {
            if (!this._rootEl.getAttribute('data-recaptcha')) {
                loadJs(url)
                    .then(() => {
                        this._rootEl.setAttribute('data-recaptcha', true);
                    })
                    .catch((error) => {
                        HappycowErrorReporter.logError({ error }, false);
                    });
            }
        }
    }

    return GoogleRecaptcha;
})();
;var socialData = {};
const hcAuth = new HappycowAuthentication();
const hcGoogleApi = HappycowCommon.initGoogleApi();

(() => {
    addLiveEventListener('shown.hc.registration', '#authentication-modal .register-form-container', function (e) {
        if (Object.keys(socialData).length == 0) return;
        const modalEmailEl = document.querySelector('#modal-register-email');
        const modalRegisterAppleEl = document.querySelector('#modal-register-appleid');
        const modalRegisterFacebookEl = document.querySelector('#modal-register-fbid');
        const modalRegisterGoogleEl = document.querySelector('#modal-register-googleid');

        document.querySelector('#modal-register-username').value = socialData.username.replace(/\s/g, '');
        modalEmailEl.value = socialData.email;

        if (modalEmailEl.value) {
            modalEmailEl.readOnly = true;
        }

        if (socialData.appleid) {
            modalRegisterAppleEl.value = socialData.appleid;
            modalRegisterFacebookEl.value = '';
            modalRegisterGoogleEl.value = '';
            socialData = {};
            HappycowToastr.basic('Complete the form to register with Apple');
            return;
        }
        if (socialData.fbid) {
            modalRegisterAppleEl.value = '';
            modalRegisterFacebookEl.value = socialData.fbid;
            modalRegisterGoogleEl.value = '';
            socialData = {};
            HappycowToastr.basic('Complete the form to register with Facebook');
            return;
        }
        if (socialData.googleid) {
            modalRegisterAppleEl.value = '';
            modalRegisterFacebookEl.value = '';
            modalRegisterGoogleEl.value = socialData.googleid;
            socialData = {};
            HappycowToastr.basic('Complete the form to register with Google');
        }
    });

    if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
        document
            .querySelector('meta[name=viewport]')
            .setAttribute('content', 'initial-scale=1.0000, minimum-scale=1.0000, maximum-scale=1.0000, user-scalable=no');
    }

    addLiveEventListener('click', '.btn-apple-register', function (e) {
        e.preventDefault();
        HappycowCommon.initAppleApi()
            .then(function () {
                AppleID.auth.signIn().then((data) => {
                    hcAuth
                        .appleLogin(data.authorization.id_token)
                        .then(function (d) {
                            handleResponse(d, 'ap');
                        })
                        .catch(function (error) {
                            HappycowErrorReporter.logError({ error }, 'Something went wrong with Apple Authentication, please try again soon');
                        });
                });
            })
            .catch(function (error) {
                HappycowErrorReporter.logError({ error });
            });
    });

    addLiveEventListener('click', '.btn-fb-login', function (e) {
        e.preventDefault();
        const options = {
            scope: 'public_profile,email,user_hometown',
            return_scopes: true,
        };
        loginFacebook(options);
    });

    function loginFacebook(options) {
        if (typeof FB === 'undefined') return;
        FB.login(function (response) {
            FB.api('/me/permissions', function (permissionsResponse) {
                const declined = [];
                if (!permissionsResponse.data) return;
                for (i = 0; i < permissionsResponse.data.length; i++) {
                    if (permissionsResponse.data[i].status == 'declined') {
                        declined.push(permissionsResponse.data[i].permission);
                    }
                }
                if (response.status === 'connected' && declined.indexOf('email') !== -1) {
                    hcAlert
                        .open({
                            title: 'Facebook Registration failed',
                            message: "It seems you haven't allowed your email to be shared. We require this to set up your account. Please try again.",
                            buttonExtra: {
                                text: 'Request Email Permission',
                                closeAlert: true,
                                value: 'requestEmailPermission',
                            },
                        })
                        .then((value) => {
                            if (value && value === 'requestEmailPermission') {
                                options.scope = 'email';
                                options.auth_type = 'rerequest';
                                loginFacebook(options);
                            }
                        });
                    return false;
                }
                // noinspection JSUnresolvedReference
                hcAuth
                    .facebookLogin(response.authResponse.accessToken)
                    .then(function (d) {
                        handleResponse(d, 'fb');
                    })
                    .catch(function (error) {
                        HappycowErrorReporter.logError({ error }, 'Something went wrong with Facebook Authentication, please try again soon');
                    });
            });
        }, options);
    }

    addLiveEventListener('click', '#login-form [type=submit]', function (e) {
        e.preventDefault();
        const loginForm = document.querySelector('#login-form');
        if (!loginForm) return;

        HappycowAnalytics.gtagEvent('login_submit');

        hcValidator
            .check(loginForm, false, true)
            .then((result) => {
                if (!result) {
                    return;
                }
                const username = loginForm.querySelector('#dialog-username').value;
                const password = loginForm.querySelector('#password').value;
                const remember = loginForm.querySelector('#remember').checked;
                hcAuth
                    .login(username, password, remember)
                    .then(function (d) {
                        handleResponse(d);
                    })
                    .catch(function (error) {
                        HappycowErrorReporter.logError({ error });
                        loginForm.querySelector('.dialog-username').focus();
                    });
            })
            .catch((error) => {
                HappycowErrorReporter.logError({ error });
            });
    });
})();

function loadGoogleButton(parentEl = '.login-google') {
    const el = document.querySelector(`${parentEl} .btn-google-auth`);
    if (!el) {
        return;
    }
    hcGoogleApi.then(({ googleApiAccounts, googleApiLoaded }) => {
        if (googleApiLoaded) {
            deleteElement(`${parentEl} .btn-google-placeholder`);
            googleApiAccounts.renderButton(el, {
                type: 'icon',
                theme: 'outline',
                size: 'large',
                shape: 'circle',
                locale: 'en_US',
            });
        }
    });
}

function handleResponse(d, method = 'hc') {
    if (d.success) {
        const authenticationModal = document.querySelector('#authentication-modal');
        if (authenticationModal) {
            const loginForm = authenticationModal.querySelector('form#login-form');
            if (loginForm) loginForm.reset();
        }
        method = typeof method !== 'undefined' ? method : 'hc';
        HappycowAnalytics.gtagEvent('login', {
            method: method,
        });
        const registerPage = document.querySelector('#members-register');
        if (registerPage) {
            const registerForm = registerPage.querySelector('#register-form');
            if (registerForm) registerForm.reset();
        }

        const loginPage = document.querySelector('#members-login');
        if (loginPage) {
            if (d.returnTo && d.returnTo.length > 0) {
                window.location = d.returnTo;
                return;
            }
        }

        if (d.firstLogin) {
            window.location = '/members/profile/edit';
            return;
        }

        if (registerPage) {
            window.location.href = '/';
            return;
        }

        if (authenticationModal) {
            hcModal.close('#authentication-modal');
            getUserData();
            const personalDetails = document.querySelector('.personal-details');
            if (personalDetails) {
                personalDetails.remove();
            }
            HappycowToastr.success('You are now logged in');
            return;
        }

        window.location.href = '/';
        return;
    }

    if (d.message && Object.keys(d.message).length > 0) {
        if (d.message.fbid || d.message.googleid || d.message.appleid) {
            handleSocialRegistration(d.message);
            return;
        }
    }

    if (d.message && d.message.length > 0) {
        HappycowToastr.error(d.message);
        const loginForm = document.querySelector('#login-form');
        if (loginForm) {
            loginForm.querySelector('#password').value = '';
            loginForm.querySelector('#dialog-username').focus();
        }
    }
}

function handleSocialRegistration(data) {
    const authenticationModal = document.querySelector('#authentication-modal');
    if (authenticationModal && authenticationModal.classList.contains('show')) {
        document.querySelector('.nav-item-register a').click();
        socialData = data;
        if (!socialData.email) {
            if (socialData.fbid) {
                socialRegisterAlert('Facebook');
            }
            if (socialData.googleid) {
                socialRegisterAlert('Google');
            }
            if (socialData.appleid) {
                socialRegisterAlert('Apple');
            }
        }
        return;
    }

    const loginPage = document.querySelector('#members-login');
    if (loginPage) {
        const lstorage = new HappycowLocalStorage();
        const jsonData = JSON.stringify(data);
        lstorage.removeItem('socialData');
        lstorage.setItem('socialData', jsonData);
        window.location.href = '/members/register';
        return;
    }

    const registerPage = document.querySelector('#members-register');
    if (registerPage) {
        const registerForm = document.querySelector('#register-form');
        const registerEmailEl = registerForm.querySelector('#email');
        const registerAppleEl = registerForm.querySelector('#appleid');
        const registerFacebookEl = registerForm.querySelector('#fbid');
        const registerGoogleEl = registerForm.querySelector('#googleid');

        registerForm.querySelector('#username').value = data.username.replace(/\s/g, '');
        registerEmailEl.value = data.email;

        if (registerEmailEl.value) {
            registerEmailEl.readOnly = true;
        }

        if (data.appleid) {
            registerAppleEl.value = data.appleid;
            registerFacebookEl.value = '';
            registerGoogleEl.value = '';
            HappycowToastr.basic('Complete the form to register with Apple');
            return;
        }
        if (data.fbid) {
            registerAppleEl.value = '';
            registerFacebookEl.value = data.fbid;
            registerGoogleEl.value = '';
            HappycowToastr.basic('Complete the form to register with Facebook');
            return;
        }
        if (data.googleid) {
            registerAppleEl.value = '';
            registerFacebookEl.value = '';
            registerGoogleEl.value = data.googleid;
            HappycowToastr.basic('Complete the form to register with Google');
        }
    }
}

function socialRegisterAlert(socialName) {
    hcAlert.open({
        title: 'Registration information',
        message: `We'll need an email address to continue. After registering with an email address you may connect your ${socialName} account via our website on your profile page.`,
        size: 'lg',
    });
}
;var csrf = HappycowCommon.getCsrf();
var pubSub = new HappycowPubSub();

const hcAlert = new HappycowAlert();
const hcDropdown = new HappycowDropdown();
const hcModal = new HappycowModal();
const hcCarousel = new HappycowCarousel();
const hcGoogleRecaptcha = new HappycowGoogleRecaptcha();
const hcValidator = new HappycowValidator();

hcModal.init();
hcCarousel.init();
hcDropdown.init();
hcValidator.init();
hcGoogleRecaptcha.init();

window.onload = () => {
    setTimeout(() => {
        const parsedContent = new DOMParser().parseFromString(document.querySelector('#deferred-scripts').textContent, 'text/html');
        const deferredScripts = parsedContent.querySelectorAll('script');
        deferredScripts.forEach((item) => {
            loadJs(item.getAttribute('src'));
        });
    }, 50);
};

function recaptchaRender() {
    // Always first
    const recaptchaAuth = document.querySelector('.g-recaptcha-authentication');
    if (recaptchaAuth) {
        grecaptcha.render(recaptchaAuth.id, {
            sitekey: recaptchaAuth.dataset.sitekey,
            callback: recaptchaAuth.dataset.callback,
        });
    }

    const recaptchaItems = document.querySelectorAll('.g-recaptcha');
    recaptchaItems.forEach(function (item) {
        grecaptcha.render(item.id, {
            sitekey: item.dataset.sitekey,
            callback: item.dataset.callback,
        });
    });
}
;